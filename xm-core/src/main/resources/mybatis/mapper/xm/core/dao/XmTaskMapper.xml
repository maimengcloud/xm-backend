<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xm.core.entity.XmTask">
	
	
	<!--开始 自定sql函数区域 请在此区域添加自定义函数,其它区域尽量不要动，因为代码随时重新生成 -->

    <sql id="whereForMap">
         <if test=" ids != null">  and (res.id) in
             <foreach collection="ids" item="item" index="index" open="(" separator="," close=")" >
                 ( #{item})
             </foreach>
         </if>

		<if test=" lvls != null">  and (res.lvl) in
			<foreach collection="lvls" item="item" index="index" open="(" separator="," close=")" >
				( #{item})
			</foreach>
		</if>
		<if test=" pidPathsList != null">  and
			<foreach collection="pidPathsList" item="item" index="index" open="(" separator=" or " close=")" >
				#{item} like concat(res.pid_paths,'%')
			</foreach>
		</if>
		<if test=" tagIdList != null"> and
			<foreach collection="tagIdList" item="item" index="index" open="(" separator=" or " close=")" >
				find_in_set(#{item},res.tag_ids)
			</foreach>
		</if>
		<if test=" createTimeStart !=null "> and res.create_time &gt; #{createTimeStart} </if>
		<if test=" createTimeEnd !=null "> and res.create_time &lt; #{createTimeEnd} </if>
		<if test="parent != null and parent != ''"> and (res.parent_taskid = '' or res.parent_taskid IS NULL)</if>

		<!-- 我参与的-->
		<if test=" (myExecuserStatus != null and myExecuserStatus) != '' or ( isMy !=null and isMy !='' )">
			and  exists ( select 1 from xm_task_execuser exe where exe.task_id=res.id and exe.userid=#{userid}
			<if test=' myExecuserStatus != "all" and  myExecuserStatus!=null and myExecuserStatus !="" '>
				and exe.status=#{myExecuserStatus}
			</if>
			)
		</if>
		<!-- 我关注的 -->
		<if test="myFocus != null and myFocus != ''">
			and exists ( select 1 from xm_my_focus f where f.userid=#{userid} and f.pbiz_id=res.project_id and f.biz_id=res.id  )
		</if>
		<if test="skillIds != null and skillIds != ''">
			and exists ( select 1 from xm_task_skill f where f.task_id=res.id and f.task_skill_id in
			<foreach collection="skillIds" item="item" index="index" open="(" separator="," close=")" >
				#{item}
			</foreach>
			)
		</if>
		<if test="compete !=null and compete!=''">
			and ( exists ( select 1 from xm_group_user gu where gu.userid=#{compete} and gu.project_id=res.project_id )
			or  exists ( select 1 from xm_task_execuser exe where exe.project_id=res.project_id and exe.userid=#{compete})
			)

		</if>
		<if test="iterationId!=null and iterationId!=''">
			and exists ( select 1 from xm_menu im where im.menu_id=res.menu_id and  im.iteration_id=#{iterationId})
		</if>
		<if test="key != null and key !='' ">    and res.name like #{key}   </if>
		<if test="work != null and work != ''"> and res.rate != '100' </if>
		<if test="isTop!=null and isTop!=''">
			and (res.parent_taskid is null or res.parent_taskid='')
		</if>
		<if test="linkProductId!=null and linkProductId!=''">
			and exists( select 1 from xm_product_project_link link where and link.product_id=#{linkProductId} and link.project_id=res.project_id)
		</if>
    </sql>
	<select id="getAvgRate" parameterType="String" resultType="long" >
		select avg(res.rate) from xm_task res where res.parent_taskid = #{parentTaskid}
	</select>

	<select id="shareTaskDetail" parameterType="HashMap" resultType="HashMap">
		SELECT res.*,m.remark from xm_task res left join xm_menu m on res.menu_id = m.menu_id
		WHERE res.id=#{id}
	</select>
	<select id="checkExistsExecuser" parameterType="String" resultType="Long" >
		select count(1) from xm_task_execuser res where res.task_id = #{taskId} and ( res.settle_status not in('2','6'))
	</select>
	<select id="checkExistsChildren" parameterType="String" resultType="Long" >
		select count(1) from xm_task res where res.parent_taskid = #{id}
	</select>
	<update id="updatePreTask" parameterType="String">
		update  xm_task set pre_taskid = NULL,pre_taskname = NULL where pre_taskid = #{id}
	</update>

	<update id="relTaskWithMenu" parameterType="com.xm.core.entity.XmTask">
		update  xm_task set menu_id = #{menuId}, menu_name = #{menuName},product_id=#{productId},product_name=#{productName} where id = #{id}
	</update>

	<update id="updateTaskChildrenCntByTaskId" parameterType="String">
		UPDATE xm_task t
		LEFT JOIN ( SELECT count( 1 ) AS children_cnt, tt.parent_taskid AS id FROM xm_task tt WHERE tt.parent_taskid = #{id} ) t2 ON t2.id = t.id
		SET t.children_cnt = ifnull( t2.children_cnt, 0 )
		WHERE
		t.id = #{id}
	</update>

	<update id="updateChildrenCntByIds" parameterType="List">
		UPDATE xm_task t
		LEFT JOIN ( SELECT count( 1 ) AS children_cnt, tt.parent_taskid AS id FROM xm_task tt  WHERE
		(tt.parent_taskid) in
		<foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
			( #{item})
		</foreach>
		group by tt.parent_taskid ) t2 ON t2.id = t.id
		SET t.children_cnt = ifnull( t2.children_cnt, 0 )
		WHERE  (t.id) in
		<foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
			( #{item})
		</foreach>
	</update>
	<update id="batchRelTasksWithMenu" parameterType="HashMap">
		update xm_task res set res.menu_id=#{menuId},res.menu_name =#{menuName}, res.product_id=#{productId}
		where res.id in
		<foreach collection="taskIds" item="item" index="index" open="(" separator="," close=")" >
			#{item}
		</foreach>
		and res.ntype!='1'
	</update>

	<update id="batchRelTasksWithPhase" parameterType="com.xm.core.vo.BatchRelTasksWithPhase">
		update xm_task res set res.phase_id=#{phaseId}
		where res.id in
		<foreach collection="taskIds" item="item" index="index" open="(" separator="," close=")" >
			#{item}
		</foreach>
		and res.ntype='0'
	</update>

	<!-- 查询任务总的预算及对应的计划的预算，任务总预算不能大于计划总预算 -->
	<select id="selectTotalTaskBudgetCost" parameterType="HashMap" resultType="HashMap">
		SELECT
		ifnull(p.budget_at,0) as budget_at,
		ifnull(p.budget_workload,0) as budget_workload,
		tc.*
		FROM xm_task p	LEFT JOIN
		(select
		res.parent_taskid,
		sum( ifnull(res.budget_at,0) ) AS child_budget_at,
		sum( ifnull(res.budget_workload,0) ) AS child_budget_workload
		from
		xm_task res where res.parent_taskid=#{parentTaskid}
		<if test=" excludeTaskIds !=null "> and res.id not in
			<foreach collection="excludeTaskIds" item="item" index="index" open="(" separator="," close=")" >
				#{item}
			</foreach>
		</if>
		) as tc ON p.id = tc.parent_taskid
		WHERE
		p.id = #{parentTaskid}

	</select>
	<!-- 通过条件查询获取数据列表 不分页 返回 list<Object> -->
	<select id="selectTaskListByIds" parameterType="HashMap" resultType="com.xm.core.entity.XmTask">
		select (select sum(1) from xm_task t where t.parent_taskid=res.id) as children_cnt, res.* from xm_task res
		where   res.id in
		<foreach collection="ids" item="item" index="index" open="(" separator="," close=")" >
			#{item}
		</foreach>
	</select>
	<!-- 适合没有交叉的，没用父子关系的一批任务的更新 -->
	<update id="batchSumParents" parameterType="List">
			UPDATE xm_task res
			LEFT JOIN (
			SELECT
			t.parent_taskid,
			count(1) as children_cnt,
			sum( ifnull( t.budget_at, 0 ) ) AS budget_at,
			sum( ifnull( t.budget_workload, 0 ) ) AS budget_workload,
			sum( ifnull( t.act_at, 0 ) ) AS act_at,
			sum( ifnull( t.act_workload, 0 ) ) AS act_workload,
			sum( ifnull( t.budget_workload, 0 ) * ifnull( t.rate, 0 ) )   AS budget_workload_rate,
			sum( ifnull(t.rate,0)) as total_rate,
			min( t.start_time ) AS start_time,
			max( t.end_time ) AS end_time,
			min( t.act_start_time ) AS act_start_time,
			max( t.act_end_time ) AS act_end_time
			FROM
			xm_task t
			WHERE
			t.parent_taskid in
			<foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
				#{item}
			</foreach>
			 group by t.parent_taskid
			) t2 ON t2.parent_taskid = res.id
			SET
			res.budget_workload=ifnull(t2.budget_workload,0),
			res.act_at = t2.act_at,
			res.act_workload = t2.act_workload,
		    res.rate = case when (ifnull(t2.budget_workload,0) >0) then ifnull(t2.act_workload,0)*100/(ifnull(t2.budget_workload,0) )
		                    when  t2.act_workload >0 then 100
							when res.task_state in('2','3','4') then 100
		                    else res.rate end,
			res.start_time = ifnull(res.start_time,t2.start_time),
			res.end_time = ifnull(t2.end_time,t2.end_time),
			res.act_start_time = t2.act_start_time,
			res.act_end_time = t2.act_end_time,
			res.children_cnt = ifnull( t2.children_cnt, 0 ),
		    res.ntype=if(t2.children_cnt>0,"1",res.ntype)
			WHERE
			res.id in
			<foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
				#{item}
			</foreach>
				and res.ntype='1'
	</update>
	<!-- 适合父子关系的一批任务的更新 -->
	<update id="sumParents" parameterType="List">
		<foreach collection="list" item="item" index="index" open="" separator=";" close="" >
		UPDATE xm_task res
		left JOIN (
		SELECT
		t.parent_taskid,
		count(1) as children_cnt,
		sum( ifnull( t.act_at, 0 ) ) AS act_at,
		sum( ifnull( t.act_workload, 0 ) ) AS act_workload,
			sum( ifnull( t.budget_at, 0 ) ) AS budget_at,
			sum( ifnull( t.budget_workload, 0 ) * ifnull( t.rate, 0 ) ) as budget_workload_rate,
			sum( ifnull(t.rate,0)) as total_rate,
			sum( ifnull( t.budget_workload, 0 )) as budget_workload,
			min( t.act_start_time ) AS act_start_time,
			max( t.act_end_time ) AS act_end_time,
			min( t.start_time ) AS start_time,
			max( t.end_time ) AS end_time
		FROM
		xm_task t
		WHERE
			t.parent_taskid = #{item}
		) t2 ON t2.parent_taskid = res.id
		SET
			res.budget_workload=ifnull(t2.budget_workload,0),
		res.act_at = t2.act_at,
		res.act_workload = t2.act_workload,
			res.rate = case when ( ifnull(t2.budget_workload,0)>0) then ifnull(t2.act_workload,0)*100/( ifnull(t2.budget_workload,0))
							when  t2.act_workload >0 then 100
							when res.task_state in('2','3','4') then 100
							else res.rate end,
			res.start_time = ifnull(res.start_time,t2.start_time),
		res.end_time = ifnull(t2.end_time,t2.end_time),
		res.act_start_time = t2.act_start_time,
		res.act_end_time = t2.act_end_time ,
		res.children_cnt = ifnull( t2.children_cnt, 0 ),
		res.ntype=if(t2.children_cnt>0,"1",res.ntype)
		WHERE
		res.id  = #{item}
		and res.ntype='1'
		</foreach>
	</update>


	<select id="calcProjectAndTaskBudget" resultType="HashMap" parameterType="HashMap">
		select p.id,p.name,p.plan_total_cost,sum(budget_at) as budget_at from xm_project p left join xm_task t on t.project_id=p.id
		where p.id=#{projectId} and t.lvl=1 and t.id not in
		<foreach collection="excludeTaskIds" item="item" index="index" open="(" separator="," close=")" >
			#{item}
		</foreach>
		group by p.id
	</select>

	<select id="listTenTaskByProjectIdAndIterationId" parameterType="HashMap" resultType="com.xm.core.entity.XmTask">
		select name from xm_task res where res.project_id=#{projectId} and exists(select 1 from xm_menu m where m.menu_id=res.menu_id and m.iteration_id=#{iterationId} and m.ntype='0')
		and res.ntype='0'
		limit 10
	</select>

	<select id="listTenTaskByProjectIdAndProductId" parameterType="HashMap" resultType="com.xm.core.entity.XmTask">
		select name from xm_task res where res.project_id=#{projectId} and  exists(select 1 from xm_menu m where m.menu_id=res.menu_id and m.product_id=#{productId} and m.ntype='0')
		and res.ntype='0'
		limit 10
	</select>

	<update id="batchChangeParent" parameterType="HashMap">
		update   xm_task res inner join (
		select t.id,pid_paths,parent_taskid,parent_taskname from xm_task t where t.id in
			<foreach collection="taskIds" item="item" index="index" open="(" separator="," close=")" >
				#{item}
			</foreach>
		) as t1 on res.pid_paths like concat(t1.pid_paths,'%')

		set res.pid_paths = replace(res.pid_paths,t1.pid_paths,concat(#{parentPidPaths},res.id,',')),
		res.parent_taskid=if(res.id=t1.id,#{parentTaskid},res.parent_taskid),
		res.parent_taskname=if(res.id=t1.id,#{parentTaskname},res.parent_taskname),
		res.lvl= LENGTH(replace(res.pid_paths,t1.pid_paths,concat(#{parentPidPaths},res.id,',')))-LENGTH(REPLACE(replace(res.pid_paths,t1.pid_paths,concat(#{parentPidPaths},res.id,',')),',',''))-1

	</update>
	<update id="updateActCostAndActWorkloadAfterSettle" parameterType="HashMap">
		update xm_task res left join (
			select u.task_id, sum(u.act_at_amount)  as act_at_amount ,sum(u.act_workload) as act_workload from xm_project_m_cost_user u
			where u.task_id=#{id}
		group by u.task_id
		) as cu on cu.task_id=res.id
		set res.act_workload=ifnull(cu.act_workload,0),res.act_at=ifnull(cu.act_at_amount,0),
		res.task_state=ifnull(#{taskState},res.task_state)
		where id=#{id}
	</update>
	<update id="calcWorkloadByRecord" parameterType="List">
		update xm_task res left join
		(select w.task_id, sum(ifnull(w.workload,0)) as workload  from xm_task_workload w where w.task_id  in
			<foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
				#{item}
			</foreach>
		  group by w.task_id
		)
		as w on res.id=w.task_id
		set res.act_workload=w.workload,res.rate=case when res.task_state in('2','3','4') then 100
		when res.budget_workload>0 then ifnull(w.workload,0)*100/ res.budget_workload
		when w.workload>0 then 100
		else res.rate end
		where res.id in
		<foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
			#{item}
		</foreach>
	</update>

	<!-- 批量更新 -->
	<update id="batchUpdateBudgetWorkloadAndRate" parameterType="HashMap">
 			update  xm_task res
			set
			res.init_workload=if(res.init_workload is null or res.init_workload=0,#{budgetWorkload},res.init_workload),
		    res.budget_workload=#{budgetWorkload},
			res.rate=case when res.task_state in('2','3','4') then 100
			when #{budgetWorkload}>0 then ifnull(res.act_workload,0)*100/ #{budgetWorkload}
			when res.act_workload>0 then 100
			else res.rate end
			where id in
			<foreach collection="ids" item="item" index="index" open="(" separator="," close=")" >
				#{item}
			</foreach>
 	</update>

	<select id="getXmTaskAttDist" parameterType="HashMap" resultType="HashMap">
		select count(*) as value,${groupBy} as name from xm_task res
		<where>
			<include refid="whereForMap"></include>
			<include refid="where"></include>
		</where>
		group by ${groupBy}
	</select>
	<select id="getXmTaskAgeDist" parameterType="HashMap" resultType="HashMap">

		select sum(value) as value,case when age&lt;3 then 0 when age &lt;6 then 1 when age &lt;8 then 2 when age &lt;16 then 3 when age&lt;31 then 4 else 5 end as name from (
		select count(*) as value, datediff (res.end_time,res.start_time)  as age from  xm_task res
		<where>
			<include refid="whereForMap"></include>
			<include refid="where"></include>
		</where>
		group by age
		) as a
		group by name
	</select>

	<select id="getXmTaskSort" parameterType="HashMap" resultType="HashMap">
		select count(*) as value,${groupBy} as id,
		max( <if test="groupBy=='create_userid'">create_username</if>
		<if test="groupBy=='executor_userid'">executor_username</if>
		<if test="groupBy=='menu_id'">menu_name</if>  ) as name from xm_task res
		<where>
			<include refid="whereForMap"></include>
			<include refid="where"></include>
		</where>
		group by ${groupBy}
	</select>
	<!--结束 自定义sql函数区域-->
	

	
	<!-- 通过条件查询获取数据列表 返回list<map> -->
	<select id="selectListMapByWhere" parameterType="HashMap" resultType="HashMap">
		select * from xm_task res
		<where>
		    <include refid="whereForMap"/>
			<include refid="where"/>
		</where>
	</select>
	
	<!-- 通过条件查询获取数据列表 不分页 返回 list<Object> -->
	<select id="selectListByWhere" parameterType="com.xm.core.entity.XmTask" resultType="com.xm.core.entity.XmTask">
		select * from xm_task res
		<where>
			<include refid="where"/>
		</where>
	</select>
	
		<!-- 通过主键查询获取数据对象 返回object -->
	<select id="selectOneObject" parameterType="com.xm.core.entity.XmTask" resultType="com.xm.core.entity.XmTask">
		select * from xm_task res
		where 
			res.id = #{id}
	</select>
    <select id="selectListByIds" parameterType="List" resultType="com.xm.core.entity.XmTask">
        select * from xm_task res
        where  (res.id) in
             <foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
                 ( #{item})
             </foreach>
    </select>
	<!-- 通过主键查询获取数据对象 返回map-->
	<select id="selectOneMap" parameterType="HashMap" resultType="HashMap">
		select * from xm_task res
		where 
			 res.id = #{id}
	</select>
	<!-- 获取数据条目 返回long -->
	<select id="countByWhere" parameterType="com.xm.core.entity.XmTask" resultType="long">
		select count(*) from xm_task res
		<where>
			<include refid="where"/>
		</where>
	</select>
	<!-- 新增一条记录  主键id,-->
	<insert id="insert" parameterType="com.xm.core.entity.XmTask" useGeneratedKeys="false"   keyProperty="id">
		insert into xm_task(
			<include refid="columns"/>
		) values (
		#{id},#{name},#{parentTaskid},#{parentTaskname},#{projectId},#{projectName},#{level},#{sortLevel},#{executorUserid},#{executorUsername},#{preTaskid},#{preTaskname},#{startTime},#{endTime},#{milestone},#{description},#{remarks},#{createUserid},#{createUsername},#{createTime},#{rate},#{budgetAt},#{budgetWorkload},#{actAt},#{actWorkload},#{taskState},#{taskType},#{taskClass},#{toTaskCenter},#{actStartTime},#{actEndTime},#{bizProcInstId},#{bizFlowState},#{phaseId},#{phaseName},#{taskSkillNames},#{exeUsernames},#{taskSkillIds},#{exeUserids},#{taskOut},#{planType},#{settleSchemel},#{menuId},#{menuName},#{productId},#{cbranchId},#{cdeptid},#{tagIds},#{tagNames},#{ntype},#{childrenCnt},#{ltime},#{pidPaths},#{lvl},#{isTpl},#{keyPath},#{uniInnerPrice},#{uniOutPrice},#{calcType},#{ptype},#{wtype},#{bctrl},#{initWorkload},#{shareFee},#{oshare},#{crowd},#{browseUsers},#{execUsers},#{cityId},#{cityName},#{regionType},#{browseTimes},#{capaLvls},#{tranMode},#{supRequires},#{hot},#{top},#{urgent},#{crmSup},#{bidStep},#{interestLvls},#{filePaths},#{estate},#{efunds},#{etoPlatTime},#{etoDevTime},#{ebackTime},#{topStime},#{topEtime},#{hotStime},#{hotEtime},#{urgentStime},#{urgentEtime}
		)
	</insert>
	
	<!-- 按条件删除若干条记录-->
	<delete id="deleteByWhere" parameterType="com.xm.core.entity.XmTask">
		delete from xm_task res
		<where>  
			<include refid="where"/>
		</where>
	</delete>
	
	<!-- 按主键删除一条记录-->
	<delete id="deleteByPk" parameterType="com.xm.core.entity.XmTask">
		delete from xm_task 
		where id = #{id} 
	</delete>
	
	<!-- 根据条件修改若干条记录 -->
	<update id="updateSomeFieldByPk" parameterType="com.xm.core.entity.XmTask">
		update  xm_task 
		<set>
			<include refid="someFieldSet"/>
		</set>
		where id = #{id} 
	</update>
	
		<!-- 根据主键修改一条记录 -->
	<update id="updateByPk" parameterType="com.xm.core.entity.XmTask">
		update  xm_task 
		<set>
			<include refid="set"/>
		</set>
		where id = #{id} 
	</update>

	<!-- 批量新增  批量插入 借用insert 循环插入实现
	<insert id="batchInsert" parameterType="List">
 	</insert>
 	-->
 	
	<!-- 批量更新 -->
	<update id="batchUpdate" parameterType="List">   
		<foreach collection="list" item="item" index="index" separator=";" >
   		update  xm_task 
		set 
			<include refid="batchSet"/>
			where id = #{item.id}  
		</foreach> 
	</update>

	<!-- 批量修改某几个字段 -->
	<delete id="editSomeFields" parameterType="HashMap">
		update  xm_task
        <set>
            <include refid="someFieldSet"/>
        </set>
        where  (id) in
             <foreach collection="ids" item="item" index="index" open="(" separator="," close=")" >
                 ( #{item})
             </foreach>
	</delete>
	<!-- 批量删除 -->
	<delete id="batchDelete" parameterType="List">  
		delete from xm_task 
			where
			(id) in
                <foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
                    (  #{item.id} )
                </foreach>
	</delete>
	
	
	<!--sql片段 列-->
	<sql id="columns">
		id,name,parent_taskid,parent_taskname,project_id,project_name,level,sort_level,executor_userid,executor_username,pre_taskid,pre_taskname,start_time,end_time,milestone,description,remarks,create_userid,create_username,create_time,rate,budget_at,budget_workload,act_at,act_workload,task_state,task_type,task_class,to_task_center,act_start_time,act_end_time,biz_proc_inst_id,biz_flow_state,phase_id,phase_name,task_skill_names,exe_usernames,task_skill_ids,exe_userids,task_out,plan_type,settle_schemel,menu_id,menu_name,product_id,cbranch_id,cdeptid,tag_ids,tag_names,ntype,children_cnt,ltime,pid_paths,lvl,is_tpl,key_path,uni_inner_price,uni_out_price,calc_type,ptype,wtype,bctrl,init_workload,share_fee,oshare,crowd,browse_users,exec_users,city_id,city_name,region_type,browse_times,capa_lvls,tran_mode,sup_requires,hot,top,urgent,crm_sup,bid_step,interest_lvls,file_paths,estate,efunds,eto_plat_time,eto_dev_time,eback_time,top_stime,top_etime,hot_stime,hot_etime,urgent_stime,urgent_etime
	</sql>

	<!--sql片段 动态条件 YYYY-MM-DD HH24:MI:SS-->
	<sql id="where">
		<if test="id != null and id != ''">      and res.id = #{id}     </if>
		<if test="name != null and name != ''">      and res.name = #{name}     </if>
		<if test="parentTaskid != null and parentTaskid != ''">      and res.parent_taskid = #{parentTaskid}     </if>
		<if test="parentTaskname != null and parentTaskname != ''">      and res.parent_taskname = #{parentTaskname}     </if>
		<if test="projectId != null and projectId != ''">      and res.project_id = #{projectId}     </if>
		<if test="projectName != null and projectName != ''">      and res.project_name = #{projectName}     </if>
		<if test="level != null and level != ''">      and res.level = #{level}     </if>
		<if test="sortLevel != null and sortLevel != ''">      and res.sort_level = #{sortLevel}     </if>
		<if test="executorUserid != null and executorUserid != ''">      and res.executor_userid = #{executorUserid}     </if>
		<if test="executorUsername != null and executorUsername != ''">      and res.executor_username = #{executorUsername}     </if>
		<if test="preTaskid != null and preTaskid != ''">      and res.pre_taskid = #{preTaskid}     </if>
		<if test="preTaskname != null and preTaskname != ''">      and res.pre_taskname = #{preTaskname}     </if>
		<if test="startTime != null">      and date_format(res.start_time,'%Y-%m-%d') = date_format(#{startTime},'%Y-%m-%d')     </if>
		<if test="endTime != null">      and date_format(res.end_time,'%Y-%m-%d') = date_format(#{endTime},'%Y-%m-%d')     </if>
		<if test="milestone != null and milestone != ''">      and res.milestone = #{milestone}     </if>
		<if test="description != null and description != ''">      and res.description = #{description}     </if>
		<if test="remarks != null and remarks != ''">      and res.remarks = #{remarks}     </if>
		<if test="createUserid != null and createUserid != ''">      and res.create_userid = #{createUserid}     </if>
		<if test="createUsername != null and createUsername != ''">      and res.create_username = #{createUsername}     </if>
		<if test="createTime != null">      and date_format(res.create_time,'%Y-%m-%d') = date_format(#{createTime},'%Y-%m-%d')     </if>
		<if test="rate != null and rate != ''">      and res.rate = #{rate}     </if>
		<if test="budgetAt != null and budgetAt != ''">      and res.budget_at = #{budgetAt}     </if>
		<if test="budgetWorkload != null and budgetWorkload != ''">      and res.budget_workload = #{budgetWorkload}     </if>
		<if test="actAt != null and actAt != ''">      and res.act_at = #{actAt}     </if>
		<if test="actWorkload != null and actWorkload != ''">      and res.act_workload = #{actWorkload}     </if>
		<if test="taskState != null and taskState != ''">      and res.task_state = #{taskState}     </if>
		<if test="taskType != null and taskType != ''">      and res.task_type = #{taskType}     </if>
		<if test="taskClass != null and taskClass != ''">      and res.task_class = #{taskClass}     </if>
		<if test="toTaskCenter != null and toTaskCenter != ''">      and res.to_task_center = #{toTaskCenter}     </if>
		<if test="actStartTime != null">      and date_format(res.act_start_time,'%Y-%m-%d') = date_format(#{actStartTime},'%Y-%m-%d')     </if>
		<if test="actEndTime != null">      and date_format(res.act_end_time,'%Y-%m-%d') = date_format(#{actEndTime},'%Y-%m-%d')     </if>
		<if test="bizProcInstId != null and bizProcInstId != ''">      and res.biz_proc_inst_id = #{bizProcInstId}     </if>
		<if test="bizFlowState != null and bizFlowState != ''">      and res.biz_flow_state = #{bizFlowState}     </if>
		<if test="phaseId != null and phaseId != ''">      and res.phase_id = #{phaseId}     </if>
		<if test="phaseName != null and phaseName != ''">      and res.phase_name = #{phaseName}     </if>
		<if test="taskSkillNames != null and taskSkillNames != ''">      and res.task_skill_names = #{taskSkillNames}     </if>
		<if test="exeUsernames != null and exeUsernames != ''">      and res.exe_usernames = #{exeUsernames}     </if>
		<if test="taskSkillIds != null and taskSkillIds != ''">      and res.task_skill_ids = #{taskSkillIds}     </if>
		<if test="exeUserids != null and exeUserids != ''">      and res.exe_userids = #{exeUserids}     </if>
		<if test="taskOut != null and taskOut != ''">      and res.task_out = #{taskOut}     </if>
		<if test="planType != null and planType != ''">      and res.plan_type = #{planType}     </if>
		<if test="settleSchemel != null and settleSchemel != ''">      and res.settle_schemel = #{settleSchemel}     </if>
		<if test="menuId != null and menuId != ''">      and res.menu_id = #{menuId}     </if>
		<if test="menuName != null and menuName != ''">      and res.menu_name = #{menuName}     </if>
		<if test="productId != null and productId != ''">      and res.product_id = #{productId}     </if>
		<if test="cbranchId != null and cbranchId != ''">      and res.cbranch_id = #{cbranchId}     </if>
		<if test="cdeptid != null and cdeptid != ''">      and res.cdeptid = #{cdeptid}     </if>
		<if test="tagIds != null and tagIds != ''">      and res.tag_ids = #{tagIds}     </if>
		<if test="tagNames != null and tagNames != ''">      and res.tag_names = #{tagNames}     </if>
		<if test="ntype != null and ntype != ''">      and res.ntype = #{ntype}     </if>
		<if test="childrenCnt != null and childrenCnt != ''">      and res.children_cnt = #{childrenCnt}     </if>
		<if test="ltime != null">      and date_format(res.ltime,'%Y-%m-%d') = date_format(#{ltime},'%Y-%m-%d')     </if>
		<if test="pidPaths != null and pidPaths != ''">      and res.pid_paths = #{pidPaths}     </if>
		<if test="lvl != null and lvl != ''">      and res.lvl = #{lvl}     </if>
		<if test="isTpl != null and isTpl != ''">      and res.is_tpl = #{isTpl}     </if>
		<if test="keyPath != null and keyPath != ''">      and res.key_path = #{keyPath}     </if>
		<if test="uniInnerPrice != null and uniInnerPrice != ''">      and res.uni_inner_price = #{uniInnerPrice}     </if>
		<if test="uniOutPrice != null and uniOutPrice != ''">      and res.uni_out_price = #{uniOutPrice}     </if>
		<if test="calcType != null and calcType != ''">      and res.calc_type = #{calcType}     </if>
		<if test="ptype != null and ptype != ''">      and res.ptype = #{ptype}     </if>
		<if test="wtype != null and wtype != ''">      and res.wtype = #{wtype}     </if>
		<if test="bctrl != null and bctrl != ''">      and res.bctrl = #{bctrl}     </if>
		<if test="initWorkload != null and initWorkload != ''">      and res.init_workload = #{initWorkload}     </if>
		<if test="shareFee != null and shareFee != ''">      and res.share_fee = #{shareFee}     </if>
		<if test="oshare != null and oshare != ''">      and res.oshare = #{oshare}     </if>
		<if test="crowd != null and crowd != ''">      and res.crowd = #{crowd}     </if>
		<if test="browseUsers != null and browseUsers != ''">      and res.browse_users = #{browseUsers}     </if>
		<if test="execUsers != null and execUsers != ''">      and res.exec_users = #{execUsers}     </if>
		<if test="cityId != null and cityId != ''">      and res.city_id = #{cityId}     </if>
		<if test="cityName != null and cityName != ''">      and res.city_name = #{cityName}     </if>
		<if test="regionType != null and regionType != ''">      and res.region_type = #{regionType}     </if>
		<if test="browseTimes != null and browseTimes != ''">      and res.browse_times = #{browseTimes}     </if>
		<if test="capaLvls != null and capaLvls != ''">      and res.capa_lvls = #{capaLvls}     </if>
		<if test="tranMode != null and tranMode != ''">      and res.tran_mode = #{tranMode}     </if>
		<if test="supRequires != null and supRequires != ''">      and res.sup_requires = #{supRequires}     </if>
		<if test="hot != null and hot != ''">      and res.hot = #{hot}     </if>
		<if test="top != null and top != ''">      and res.top = #{top}     </if>
		<if test="urgent != null and urgent != ''">      and res.urgent = #{urgent}     </if>
		<if test="crmSup != null and crmSup != ''">      and res.crm_sup = #{crmSup}     </if>
		<if test="bidStep != null and bidStep != ''">      and res.bid_step = #{bidStep}     </if>
		<if test="interestLvls != null and interestLvls != ''">      and res.interest_lvls = #{interestLvls}     </if>
		<if test="filePaths != null and filePaths != ''">      and res.file_paths = #{filePaths}     </if>
		<if test="estate != null and estate != ''">      and res.estate = #{estate}     </if>
		<if test="efunds != null and efunds != ''">      and res.efunds = #{efunds}     </if>
		<if test="etoPlatTime != null">      and date_format(res.eto_plat_time,'%Y-%m-%d') = date_format(#{etoPlatTime},'%Y-%m-%d')     </if>
		<if test="etoDevTime != null">      and date_format(res.eto_dev_time,'%Y-%m-%d') = date_format(#{etoDevTime},'%Y-%m-%d')     </if>
		<if test="ebackTime != null">      and date_format(res.eback_time,'%Y-%m-%d') = date_format(#{ebackTime},'%Y-%m-%d')     </if>
		<if test="topStime != null">      and date_format(res.top_stime,'%Y-%m-%d') = date_format(#{topStime},'%Y-%m-%d')     </if>
		<if test="topEtime != null">      and date_format(res.top_etime,'%Y-%m-%d') = date_format(#{topEtime},'%Y-%m-%d')     </if>
		<if test="hotStime != null">      and date_format(res.hot_stime,'%Y-%m-%d') = date_format(#{hotStime},'%Y-%m-%d')     </if>
		<if test="hotEtime != null">      and date_format(res.hot_etime,'%Y-%m-%d') = date_format(#{hotEtime},'%Y-%m-%d')     </if>
		<if test="urgentStime != null">      and date_format(res.urgent_stime,'%Y-%m-%d') = date_format(#{urgentStime},'%Y-%m-%d')     </if>
		<if test="urgentEtime != null">      and date_format(res.urgent_etime,'%Y-%m-%d') = date_format(#{urgentEtime},'%Y-%m-%d')     </if>
	</sql>
	<!--sql片段 更新字段 -->
	<sql id="set">
		name = #{name},
		parent_taskid = #{parentTaskid},
		parent_taskname = #{parentTaskname},
		project_id = #{projectId},
		project_name = #{projectName},
		level = #{level},
		sort_level = #{sortLevel},
		executor_userid = #{executorUserid},
		executor_username = #{executorUsername},
		pre_taskid = #{preTaskid},
		pre_taskname = #{preTaskname},
		start_time = #{startTime},
		end_time = #{endTime},
		milestone = #{milestone},
		description = #{description},
		remarks = #{remarks},
		create_userid = #{createUserid},
		create_username = #{createUsername},
		create_time = #{createTime},
		rate = #{rate},
		budget_at = #{budgetAt},
		budget_workload = #{budgetWorkload},
		act_at = #{actAt},
		act_workload = #{actWorkload},
		task_state = #{taskState},
		task_type = #{taskType},
		task_class = #{taskClass},
		to_task_center = #{toTaskCenter},
		act_start_time = #{actStartTime},
		act_end_time = #{actEndTime},
		biz_proc_inst_id = #{bizProcInstId},
		biz_flow_state = #{bizFlowState},
		phase_id = #{phaseId},
		phase_name = #{phaseName},
		task_skill_names = #{taskSkillNames},
		exe_usernames = #{exeUsernames},
		task_skill_ids = #{taskSkillIds},
		exe_userids = #{exeUserids},
		task_out = #{taskOut},
		plan_type = #{planType},
		settle_schemel = #{settleSchemel},
		menu_id = #{menuId},
		menu_name = #{menuName},
		product_id = #{productId},
		cbranch_id = #{cbranchId},
		cdeptid = #{cdeptid},
		tag_ids = #{tagIds},
		tag_names = #{tagNames},
		ntype = #{ntype},
		children_cnt = #{childrenCnt},
		ltime = #{ltime},
		pid_paths = #{pidPaths},
		lvl = #{lvl},
		is_tpl = #{isTpl},
		key_path = #{keyPath},
		uni_inner_price = #{uniInnerPrice},
		uni_out_price = #{uniOutPrice},
		calc_type = #{calcType},
		ptype = #{ptype},
		wtype = #{wtype},
		bctrl = #{bctrl},
		init_workload = #{initWorkload},
		share_fee = #{shareFee},
		oshare = #{oshare},
		crowd = #{crowd},
		browse_users = #{browseUsers},
		exec_users = #{execUsers},
		city_id = #{cityId},
		city_name = #{cityName},
		region_type = #{regionType},
		browse_times = #{browseTimes},
		capa_lvls = #{capaLvls},
		tran_mode = #{tranMode},
		sup_requires = #{supRequires},
		hot = #{hot},
		top = #{top},
		urgent = #{urgent},
		crm_sup = #{crmSup},
		bid_step = #{bidStep},
		interest_lvls = #{interestLvls},
		file_paths = #{filePaths},
		estate = #{estate},
		efunds = #{efunds},
		eto_plat_time = #{etoPlatTime},
		eto_dev_time = #{etoDevTime},
		eback_time = #{ebackTime},
		top_stime = #{topStime},
		top_etime = #{topEtime},
		hot_stime = #{hotStime},
		hot_etime = #{hotEtime},
		urgent_stime = #{urgentStime},
		urgent_etime = #{urgentEtime}
	</sql>
	<sql id="someFieldSet">
		<if test="name != null and name != ''"> name = #{name},     </if>
		<if test="parentTaskid != null and parentTaskid != ''"> parent_taskid = #{parentTaskid},     </if>
		<if test="parentTaskname != null and parentTaskname != ''"> parent_taskname = #{parentTaskname},     </if>
		<if test="projectId != null and projectId != ''"> project_id = #{projectId},     </if>
		<if test="projectName != null and projectName != ''"> project_name = #{projectName},     </if>
		<if test="level != null and level != ''"> level = #{level},     </if>
		<if test="sortLevel != null and sortLevel != ''"> sort_level = #{sortLevel},     </if>
		<if test="executorUserid != null and executorUserid != ''"> executor_userid = #{executorUserid},     </if>
		<if test="executorUsername != null and executorUsername != ''"> executor_username = #{executorUsername},     </if>
		<if test="preTaskid != null and preTaskid != ''"> pre_taskid = #{preTaskid},     </if>
		<if test="preTaskname != null and preTaskname != ''"> pre_taskname = #{preTaskname},     </if>
		<if test="startTime != null"> start_time = #{startTime},     </if>
		<if test="endTime != null"> end_time = #{endTime},     </if>
		<if test="milestone != null and milestone != ''"> milestone = #{milestone},     </if>
		<if test="description != null and description != ''"> description = #{description},     </if>
		<if test="remarks != null and remarks != ''"> remarks = #{remarks},     </if>
		<if test="createUserid != null and createUserid != ''"> create_userid = #{createUserid},     </if>
		<if test="createUsername != null and createUsername != ''"> create_username = #{createUsername},     </if>
		<if test="createTime != null"> create_time = #{createTime},     </if>
		<if test="rate != null and rate != ''"> rate = #{rate},     </if>
		<if test="budgetAt != null and budgetAt != ''"> budget_at = #{budgetAt},     </if>
		<if test="budgetWorkload != null and budgetWorkload != ''"> budget_workload = #{budgetWorkload},     </if>
		<if test="actAt != null and actAt != ''"> act_at = #{actAt},     </if>
		<if test="actWorkload != null and actWorkload != ''"> act_workload = #{actWorkload},     </if>
		<if test="taskState != null and taskState != ''"> task_state = #{taskState},     </if>
		<if test="taskType != null and taskType != ''"> task_type = #{taskType},     </if>
		<if test="taskClass != null and taskClass != ''"> task_class = #{taskClass},     </if>
		<if test="toTaskCenter != null and toTaskCenter != ''"> to_task_center = #{toTaskCenter},     </if>
		<if test="actStartTime != null"> act_start_time = #{actStartTime},     </if>
		<if test="actEndTime != null"> act_end_time = #{actEndTime},     </if>
		<if test="bizProcInstId != null and bizProcInstId != ''"> biz_proc_inst_id = #{bizProcInstId},     </if>
		<if test="bizFlowState != null and bizFlowState != ''"> biz_flow_state = #{bizFlowState},     </if>
		<if test="phaseId != null and phaseId != ''"> phase_id = #{phaseId},     </if>
		<if test="phaseName != null and phaseName != ''"> phase_name = #{phaseName},     </if>
		<if test="taskSkillNames != null and taskSkillNames != ''"> task_skill_names = #{taskSkillNames},     </if>
		<if test="exeUsernames != null and exeUsernames != ''"> exe_usernames = #{exeUsernames},     </if>
		<if test="taskSkillIds != null and taskSkillIds != ''"> task_skill_ids = #{taskSkillIds},     </if>
		<if test="exeUserids != null and exeUserids != ''"> exe_userids = #{exeUserids},     </if>
		<if test="taskOut != null and taskOut != ''"> task_out = #{taskOut},     </if>
		<if test="planType != null and planType != ''"> plan_type = #{planType},     </if>
		<if test="settleSchemel != null and settleSchemel != ''"> settle_schemel = #{settleSchemel},     </if>
		<if test="menuId != null and menuId != ''"> menu_id = #{menuId},     </if>
		<if test="menuName != null and menuName != ''"> menu_name = #{menuName},     </if>
		<if test="productId != null and productId != ''"> product_id = #{productId},     </if>
		<if test="cbranchId != null and cbranchId != ''"> cbranch_id = #{cbranchId},     </if>
		<if test="cdeptid != null and cdeptid != ''"> cdeptid = #{cdeptid},     </if>
		<if test="tagIds != null and tagIds != ''"> tag_ids = #{tagIds},     </if>
		<if test="tagNames != null and tagNames != ''"> tag_names = #{tagNames},     </if>
		<if test="ntype != null and ntype != ''"> ntype = #{ntype},     </if>
		<if test="childrenCnt != null and childrenCnt != ''"> children_cnt = #{childrenCnt},     </if>
		<if test="ltime != null"> ltime = #{ltime},     </if>
		<if test="pidPaths != null and pidPaths != ''"> pid_paths = #{pidPaths},     </if>
		<if test="lvl != null and lvl != ''"> lvl = #{lvl},     </if>
		<if test="isTpl != null and isTpl != ''"> is_tpl = #{isTpl},     </if>
		<if test="keyPath != null and keyPath != ''"> key_path = #{keyPath},     </if>
		<if test="uniInnerPrice != null and uniInnerPrice != ''"> uni_inner_price = #{uniInnerPrice},     </if>
		<if test="uniOutPrice != null and uniOutPrice != ''"> uni_out_price = #{uniOutPrice},     </if>
		<if test="calcType != null and calcType != ''"> calc_type = #{calcType},     </if>
		<if test="ptype != null and ptype != ''"> ptype = #{ptype},     </if>
		<if test="wtype != null and wtype != ''"> wtype = #{wtype},     </if>
		<if test="bctrl != null and bctrl != ''"> bctrl = #{bctrl},     </if>
		<if test="initWorkload != null and initWorkload != ''"> init_workload = #{initWorkload},     </if>
		<if test="shareFee != null and shareFee != ''"> share_fee = #{shareFee},     </if>
		<if test="oshare != null and oshare != ''"> oshare = #{oshare},     </if>
		<if test="crowd != null and crowd != ''"> crowd = #{crowd},     </if>
		<if test="browseUsers != null and browseUsers != ''"> browse_users = #{browseUsers},     </if>
		<if test="execUsers != null and execUsers != ''"> exec_users = #{execUsers},     </if>
		<if test="cityId != null and cityId != ''"> city_id = #{cityId},     </if>
		<if test="cityName != null and cityName != ''"> city_name = #{cityName},     </if>
		<if test="regionType != null and regionType != ''"> region_type = #{regionType},     </if>
		<if test="browseTimes != null and browseTimes != ''"> browse_times = #{browseTimes},     </if>
		<if test="capaLvls != null and capaLvls != ''"> capa_lvls = #{capaLvls},     </if>
		<if test="tranMode != null and tranMode != ''"> tran_mode = #{tranMode},     </if>
		<if test="supRequires != null and supRequires != ''"> sup_requires = #{supRequires},     </if>
		<if test="hot != null and hot != ''"> hot = #{hot},     </if>
		<if test="top != null and top != ''"> top = #{top},     </if>
		<if test="urgent != null and urgent != ''"> urgent = #{urgent},     </if>
		<if test="crmSup != null and crmSup != ''"> crm_sup = #{crmSup},     </if>
		<if test="bidStep != null and bidStep != ''"> bid_step = #{bidStep},     </if>
		<if test="interestLvls != null and interestLvls != ''"> interest_lvls = #{interestLvls},     </if>
		<if test="filePaths != null and filePaths != ''"> file_paths = #{filePaths},     </if>
		<if test="estate != null and estate != ''"> estate = #{estate},     </if>
		<if test="efunds != null and efunds != ''"> efunds = #{efunds},     </if>
		<if test="etoPlatTime != null"> eto_plat_time = #{etoPlatTime},     </if>
		<if test="etoDevTime != null"> eto_dev_time = #{etoDevTime},     </if>
		<if test="ebackTime != null"> eback_time = #{ebackTime},     </if>
		<if test="topStime != null"> top_stime = #{topStime},     </if>
		<if test="topEtime != null"> top_etime = #{topEtime},     </if>
		<if test="hotStime != null"> hot_stime = #{hotStime},     </if>
		<if test="hotEtime != null"> hot_etime = #{hotEtime},     </if>
		<if test="urgentStime != null"> urgent_stime = #{urgentStime},     </if>
		<if test="urgentEtime != null"> urgent_etime = #{urgentEtime},     </if>
	</sql>
	<!--sql片段 批量更新 -->
	<sql id="batchSet">
			name = #{item.name},
			parent_taskid = #{item.parentTaskid},
			parent_taskname = #{item.parentTaskname},
			project_id = #{item.projectId},
			project_name = #{item.projectName},
			level = #{item.level},
			sort_level = #{item.sortLevel},
			executor_userid = #{item.executorUserid},
			executor_username = #{item.executorUsername},
			pre_taskid = #{item.preTaskid},
			pre_taskname = #{item.preTaskname},
			start_time = #{item.startTime},
			end_time = #{item.endTime},
			milestone = #{item.milestone},
			description = #{item.description},
			remarks = #{item.remarks},
			create_userid = #{item.createUserid},
			create_username = #{item.createUsername},
			create_time = #{item.createTime},
			rate = #{item.rate},
			budget_at = #{item.budgetAt},
			budget_workload = #{item.budgetWorkload},
			act_at = #{item.actAt},
			act_workload = #{item.actWorkload},
			task_state = #{item.taskState},
			task_type = #{item.taskType},
			task_class = #{item.taskClass},
			to_task_center = #{item.toTaskCenter},
			act_start_time = #{item.actStartTime},
			act_end_time = #{item.actEndTime},
			biz_proc_inst_id = #{item.bizProcInstId},
			biz_flow_state = #{item.bizFlowState},
			phase_id = #{item.phaseId},
			phase_name = #{item.phaseName},
			task_skill_names = #{item.taskSkillNames},
			exe_usernames = #{item.exeUsernames},
			task_skill_ids = #{item.taskSkillIds},
			exe_userids = #{item.exeUserids},
			task_out = #{item.taskOut},
			plan_type = #{item.planType},
			settle_schemel = #{item.settleSchemel},
			menu_id = #{item.menuId},
			menu_name = #{item.menuName},
			product_id = #{item.productId},
			cbranch_id = #{item.cbranchId},
			cdeptid = #{item.cdeptid},
			tag_ids = #{item.tagIds},
			tag_names = #{item.tagNames},
			ntype = #{item.ntype},
			children_cnt = #{item.childrenCnt},
			ltime = #{item.ltime},
			pid_paths = #{item.pidPaths},
			lvl = #{item.lvl},
			is_tpl = #{item.isTpl},
			key_path = #{item.keyPath},
			uni_inner_price = #{item.uniInnerPrice},
			uni_out_price = #{item.uniOutPrice},
			calc_type = #{item.calcType},
			ptype = #{item.ptype},
			wtype = #{item.wtype},
			bctrl = #{item.bctrl},
			init_workload = #{item.initWorkload},
			share_fee = #{item.shareFee},
			oshare = #{item.oshare},
			crowd = #{item.crowd},
			browse_users = #{item.browseUsers},
			exec_users = #{item.execUsers},
			city_id = #{item.cityId},
			city_name = #{item.cityName},
			region_type = #{item.regionType},
			browse_times = #{item.browseTimes},
			capa_lvls = #{item.capaLvls},
			tran_mode = #{item.tranMode},
			sup_requires = #{item.supRequires},
			hot = #{item.hot},
			top = #{item.top},
			urgent = #{item.urgent},
			crm_sup = #{item.crmSup},
			bid_step = #{item.bidStep},
			interest_lvls = #{item.interestLvls},
			file_paths = #{item.filePaths},
			estate = #{item.estate},
			efunds = #{item.efunds},
			eto_plat_time = #{item.etoPlatTime},
			eto_dev_time = #{item.etoDevTime},
			eback_time = #{item.ebackTime},
			top_stime = #{item.topStime},
			top_etime = #{item.topEtime},
			hot_stime = #{item.hotStime},
			hot_etime = #{item.hotEtime},
			urgent_stime = #{item.urgentStime},
			urgent_etime = #{item.urgentEtime}
	</sql>
</mapper>