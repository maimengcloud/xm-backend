<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xm.core.entity.XmTaskWorkload">
	
	
	<!--开始 自定sql函数区域 请在此区域添加自定义函数,其它区域尽量不要动，因为代码随时重新生成 -->

    <sql id="whereForMap">
         <if test=" ids != null">  and (res.id) in
             <foreach collection="ids" item="item" index="index" open="(" separator="," close=")" >
                 ( #{item})
             </foreach>
         </if>
        <if test="key != null and key !='' ">
			AND
			(   res.username like #{key} OR res.project_id like #{key} OR res.task_id like #{key})
		</if>
		<if test="toSbill !=null and toSbill !=''">
			AND  (res.wstatus = '1' AND res.sstatus = '1')
		</if>
		<if test ="wstatuses != null and wstatuses!=''">
			AND res.wstatus IN
			<foreach collection="wstatuses" item="item" index="index" open="(" separator="," close=")" >
				 #{item}
			</foreach>
		</if>
		<if test ="sstatuses != null and sstatuses!=''">
			AND res.sstatus IN
			<foreach collection="sstatuses" item="item" index="index" open="(" separator="," close=")" >
				 #{item}
			</foreach>
		</if>
		<if test="startTime!=null and startTime !=''">
			AND res.ctime BETWEEN #{startTime} AND #{endTime}
		</if>

		<if test="startBizDate!=null and startBizDate !=''">
			AND res.biz_date BETWEEN #{startBizDate} AND #{endBizDate}
		</if>
		<if test="sbillId!=null and sbillId !=''">
			AND exists( select 1 from xm_task_sbill_detail d where d.id=res.detail_id and d.sbill_id=#{sbillId})
		</if>
		<if test="linkBranchId!=null and linkBranchId!=''">
			and (res.branch_id = #{linkBranchId} or res.ubranch_id=#{linkBranchId})
		</if>
		<if test="bizMonth!=null and bizMonth!=''">
			and res.biz_date  like concat(#{bizMonth},'%')
		</if>
    </sql>
	<update id="updateStatusBySbillIdBySbillDel" parameterType="String">
		update xm_task_workload res set detail_id=null,sbill_id=null,sstatus='1'
		where exists (select 1 from xm_task_sbill_detail d where d.id=res.detail_id and d.sbill_id=#{sbillId})
	</update>
	<update id="updateStatusBySbillId" parameterType="HashMap">
		update xm_task_workload res set sstatus=#{sstatus}
		where exists (select 1 from xm_task_sbill_detail d where d.id=res.detail_id and d.sbill_id=#{sbillId})
	</update>

	<select id="listProjectWorkloadSetDay" parameterType="HashMap" resultType="HashMap">
		select
		res.biz_date,
		sum(ifnull(res.workload,0)) as workload,
		sum(if(res.wstatus='0',ifnull(res.workload,0),0)) as to_confirm_workload,
		sum(if(res.wstatus='1',ifnull(res.workload,0),0)) as had_confirm_workload,
		sum(if(res.sstatus='0',ifnull(res.workload,0),0)) as not_need_set_workload,
		sum(if(res.sstatus='1',ifnull(res.workload,0),0)) as to_set_sworkload,
		sum(if(res.sstatus='2',ifnull(res.workload,0),0)) as had_commit_sworkload,
		sum(if(res.sstatus='3',ifnull(res.workload,0),0)) as had_agree_sworkload,
		sum(if(res.sstatus='4',ifnull(res.workload,0),0)) as had_set_sworkload,
		count(distinct res.userid) as user_num
		from xm_task_workload res
		<where>
			<include refid="whereForMap"/>
			<include refid="where"/>
		</where>
		group by res.biz_date
		order by res.biz_date asc
	</select>

	<select id="listProjectWorkloadSetMonth" parameterType="HashMap" resultType="HashMap">
		select
		left(res.biz_date,7) as biz_month,
		sum(ifnull(res.workload,0)) as workload,
		sum(if(res.wstatus='0',ifnull(res.workload,0),0)) as to_confirm_workload,
		sum(if(res.wstatus='1',ifnull(res.workload,0),0)) as had_confirm_workload,
		sum(if(res.sstatus='0',ifnull(res.workload,0),0)) as not_need_set_workload,
		sum(if(res.sstatus='1',ifnull(res.workload,0),0)) as to_set_sworkload,
		sum(if(res.sstatus='2',ifnull(res.workload,0),0)) as had_commit_sworkload,
		sum(if(res.sstatus='3',ifnull(res.workload,0),0)) as had_agree_sworkload,
		sum(if(res.sstatus='4',ifnull(res.workload,0),0)) as had_set_sworkload,
		count(distinct res.userid) as user_num
		from xm_task_workload res
		<where>
			<include refid="whereForMap"/>
			<include refid="where"/>
		</where>
		group by biz_month
		order by biz_month asc
	</select>

	<select id="listTaskWorkloadBySbillIdGroupByUseridAndTaskId" parameterType="String" resultType="HashMap">
		select sum(ifnull(res.workload,0)) as workload,
		sum(ifnull(res.workload,0)) as sworkload,res.task_id ,max(res.username) as username,max(t.name) as task_name from xm_task_workload res inner join xm_task t on res.task_id=t.id
		where
		exists (select 1 from xm_task_sbill_detail d where d.id=res.detail_id and d.sbill_id=#{sbillId})
		and res.sstatus='4'
		group by res.userid,res.task_id
	</select>

	<!--查询待确认工时-->
	<select id="selectListMapGroupByTaskIdAndUserid" parameterType="HashMap" resultType="HashMap">
		select res.*, task.project_name,task.name as task_name,task.budget_workload,task.act_workload,task_state from xm_task task
		inner join (
		select res.project_id,res.task_id,res.userid,
		max(res.username) as username,
		sum(ifnull(res.workload,0)) as workload,
		sum(if(res.wstatus='0',ifnull(res.workload,0),0)) as to_confirm_workload,
		sum(if(res.wstatus='1',ifnull(res.workload,0),0)) as had_confirm_workload,
		sum(if(res.sstatus='0',ifnull(res.workload,0),0)) as not_need_set_workload,
		sum(if(res.sstatus='1',ifnull(res.workload,0),0)) as to_set_sworkload,
		sum(if(res.sstatus='2',ifnull(res.workload,0),0)) as had_commit_sworkload,
		sum(if(res.sstatus='3',ifnull(res.workload,0),0)) as had_agree_sworkload,
		sum(if(res.sstatus='4',ifnull(res.workload,0),0)) as had_set_sworkload
		from xm_task_workload res
		<where>
			<include refid="whereForMap"/>
			<include refid="where"/>
		</where>
		group by res.project_id,res.task_id,res.userid
		) as res on res.task_id = task.id
		<where>
			<if test="projectId!=null and projectId!=''">
				and task.project_id=#{projectId}
			</if>
			<if test="taskId!=null and taskId!=''">
				and task.id=#{taskId}
			</if>
			<if test="userid!=null and userid!=''">
				and res.userid=#{userid}
			</if>
			<if test="branchId!=null and branchId!=''">
				and task.cbranch_id=#{branchId}
			</if>
		</where>

	</select>

	<!--查询待结算工时-->
	<select id="ListGroupByTaskIdAndUseridToSet" parameterType="HashMap" resultType="HashMap">
		select res.*, task.project_name,task.name as task_name,task.budget_workload,task.act_workload,task_state,task_out,crowd,uni_inner_price,uni_out_price,settle_schemel as sschemel,task.budget_at,task.oshare,task.share_fee,
		e.quote_workload,e.quote_amount as quote_at,e.exec_user_branch_id,e.quote_end_time,e.quote_start_time,e.dist_userid,e.dist_username,e.exec_user_branch_id as cp_id,e.share_key,e.sfee_rate,e.sfee
		from xm_task task
		inner join (
		select res.project_id,res.task_id,res.userid,
		max(res.username) as username,
		sum(ifnull(res.workload,0)) as workload,
		sum(if(res.wstatus='0',ifnull(res.workload,0),0)) as to_confirm_workload,
		sum(if(res.wstatus='1',ifnull(res.workload,0),0)) as had_confirm_workload,
		sum(if(res.sstatus='0',ifnull(res.workload,0),0)) as not_need_set_workload,
		sum(if(res.sstatus='1',ifnull(res.workload,0),0)) as to_set_sworkload,
		sum(if(res.sstatus='2',ifnull(res.workload,0),0)) as had_commit_sworkload,
		sum(if(res.sstatus='3',ifnull(res.workload,0),0)) as had_agree_sworkload,
		sum(if(res.sstatus='4',ifnull(res.workload,0),0)) as had_set_sworkload
		from xm_task_workload res
		<where>
			<if test="projectId!=null and projectId!=''">
				and res.project_id=#{projectId}
			</if>
			<if test="taskId!=null and taskId!=''">
				and res.id=#{taskId}
			</if>
			<if test="userid!=null and userid!=''">
				and res.userid=#{userid}
			</if>
			<if test="branchId!=null and branchId!=''">
				and res.branch_id=#{branchId}
			</if>
			<if test="ubranchId!=null and ubranchId!=''">
				and res.ubranch_id=#{ubranchId}
			</if>
			<if test="userTasks!=null">
				and (res.userid,res.task_id) in
				<foreach collection="userTasks" item="item" index="index" open="(" separator="," close=")" >
					( #{item.userid},#{item.taskId})
				</foreach>
			</if>

			and res.sstatus='1'
			and res.detail_id is null
		</where>
		group by res.project_id,res.task_id,res.userid
		) as res on res.task_id = task.id
		inner join xm_task_execuser e on res.task_id=e.task_id and res.userid=e.userid
		<where>
			<if test="projectId!=null and projectId!=''">
				and task.project_id=#{projectId}
			</if>
			<if test="taskId!=null and taskId!=''">
				and task.id=#{taskId}
			</if>
			<if test="userid!=null and userid!=''">
				and res.userid=#{userid}
			</if>
			<if test="branchId!=null and branchId!=''">
				and e.branch_id=#{branchId}
			</if>
			<if test="ubranchId!=null and ubranchId!=''">
				and e.exec_user_branch_id=#{ubranchId}
			</if>
		</where>

	</select>
	<update id="updateStatusAfterJoinSbill" parameterType="HashMap">
			update xm_task_workload res set res.sstatus='2',res.detail_id=#{detailId},res.sbill_id=#{sbillId}
			where  res.id in
			<foreach collection="ids" item="item" index="index" open="(" separator="," close=")" >
				#{item}
			</foreach>
 	</update>
	<update id="updateStatusAfterDetailDel" parameterType="List">
		update xm_task_workload res set res.sstatus='1',res.detail_id=null,res.sbill_id=null
		where  res.detail_id in
		<foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
			#{item}
		</foreach>
	</update>

	<update id="updateStatusBySbillIdByFlowStatea" parameterType="HashMap">
		update xm_task_workload res inner join xm_task_sbill_detail d on d.id=res.detail_id
		set res.sstatus=#{sstatus},d.sstatus=#{sstatus}
		where d.sbill_id=#{sbillId}
	</update>

	<!--结束 自定义sql函数区域-->
	

	
	<!-- 通过条件查询获取数据列表 返回list<map> -->
	<select id="selectListMapByWhere" parameterType="HashMap" resultType="HashMap">
		select res.* ,task.project_name,task.name as task_name,task.budget_workload,task.act_workload,task.task_state from xm_task_workload res
		inner join xm_task task
		on res.task_id = task.id
		<where>
		    <include refid="whereForMap"/>
			<include refid="where"/>
		</where>
	</select>
	
	<!-- 通过条件查询获取数据列表 不分页 返回 list<Object> -->
	<select id="selectListByWhere" parameterType="com.xm.core.entity.XmTaskWorkload" resultType="com.xm.core.entity.XmTaskWorkload">
		select * from xm_task_workload res
		<where>
			<include refid="where"/>
		</where>
	</select>
	
		<!-- 通过主键查询获取数据对象 返回object -->
	<select id="selectOneObject" parameterType="com.xm.core.entity.XmTaskWorkload" resultType="com.xm.core.entity.XmTaskWorkload">
		select * from xm_task_workload res
		where 
			res.id = #{id}
	</select>
    <select id="selectListByIds" parameterType="List" resultType="com.xm.core.entity.XmTaskWorkload">
        select * from xm_task_workload res
        where  (res.id) in
             <foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
                 ( #{item})
             </foreach>
    </select>
	<!-- 通过主键查询获取数据对象 返回map-->
	<select id="selectOneMap" parameterType="HashMap" resultType="HashMap">
		select * from xm_task_workload res
		where 
			 res.id = #{id}
	</select>
	<!-- 获取数据条目 返回long -->
	<select id="countByWhere" parameterType="com.xm.core.entity.XmTaskWorkload" resultType="long">
		select count(*) from xm_task_workload res
		<where>
			<include refid="where"/>
		</where>
	</select>
	<!-- 新增一条记录  主键id,-->
	<insert id="insert" parameterType="com.xm.core.entity.XmTaskWorkload" useGeneratedKeys="false"   keyProperty="id">
		insert into xm_task_workload(
			<include refid="columns"/>
		) values (
		#{userid},#{username},#{ctime},#{taskId},#{cuserid},#{bizDate},#{wstatus},#{remark},#{ttype},#{id},#{stime},#{sstatus},#{workload},#{rworkload},#{cusername},#{projectId},#{branchId},#{ubranchId},#{sbillId},#{detailId},#{menuId},#{productId},#{caseId},#{planId},#{bugId},#{bizType}
		)
	</insert>
	
	<!-- 按条件删除若干条记录-->
	<delete id="deleteByWhere" parameterType="com.xm.core.entity.XmTaskWorkload">
		delete from xm_task_workload res
		<where>  
			<include refid="where"/>
		</where>
	</delete>
	
	<!-- 按主键删除一条记录-->
	<delete id="deleteByPk" parameterType="com.xm.core.entity.XmTaskWorkload">
		delete from xm_task_workload 
		where id = #{id} 
	</delete>
	
	<!-- 根据条件修改若干条记录 -->
	<update id="updateSomeFieldByPk" parameterType="com.xm.core.entity.XmTaskWorkload">
		update  xm_task_workload 
		<set>
			<include refid="someFieldSet"/>
		</set>
		where id = #{id} 
	</update>
	
		<!-- 根据主键修改一条记录 -->
	<update id="updateByPk" parameterType="com.xm.core.entity.XmTaskWorkload">
		update  xm_task_workload 
		<set>
			<include refid="set"/>
		</set>
		where id = #{id} 
	</update>

	<!-- 批量新增  批量插入 借用insert 循环插入实现
	<insert id="batchInsert" parameterType="List">
 	</insert>
 	-->
 	
	<!-- 批量更新 -->
	<update id="batchUpdate" parameterType="List">   
		<foreach collection="list" item="item" index="index" separator=";" >
   		update  xm_task_workload 
		set 
			<include refid="batchSet"/>
			where id = #{item.id}  
		</foreach> 
	</update>

	<!-- 批量修改某几个字段 -->
	<delete id="editSomeFields" parameterType="HashMap">
		update  xm_task_workload
        <set>
            <include refid="someFieldSet"/>
        </set>
        where  (id) in
             <foreach collection="ids" item="item" index="index" open="(" separator="," close=")" >
                 ( #{item})
             </foreach>
	</delete>
	<!-- 批量删除 -->
	<delete id="batchDelete" parameterType="List">  
		delete from xm_task_workload 
			where
			(id) in
                <foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
                    (  #{item.id} )
                </foreach>
	</delete>
	
	
	<!--sql片段 列-->
	<sql id="columns">
		userid,username,ctime,task_id,cuserid,biz_date,wstatus,remark,ttype,id,stime,sstatus,workload,rworkload,cusername,project_id,branch_id,ubranch_id,sbill_id,detail_id,menu_id,product_id,case_id,plan_id,bug_id,biz_type
	</sql>

	<!--sql片段 动态条件 YYYY-MM-DD HH24:MI:SS-->
	<sql id="where">
		<if test="userid != null and userid != ''">      and res.userid = #{userid}     </if>
		<if test="username != null and username != ''">      and res.username = #{username}     </if>
		<if test="ctime != null">      and date_format(res.ctime,'%Y-%m-%d') = date_format(#{ctime},'%Y-%m-%d')     </if>
		<if test="taskId != null and taskId != ''">      and res.task_id = #{taskId}     </if>
		<if test="cuserid != null and cuserid != ''">      and res.cuserid = #{cuserid}     </if>
		<if test="bizDate != null and bizDate != ''">      and res.biz_date = #{bizDate}     </if>
		<if test="wstatus != null and wstatus != ''">      and res.wstatus = #{wstatus}     </if>
		<if test="remark != null and remark != ''">      and res.remark = #{remark}     </if>
		<if test="ttype != null and ttype != ''">      and res.ttype = #{ttype}     </if>
		<if test="id != null and id != ''">      and res.id = #{id}     </if>
		<if test="stime != null">      and date_format(res.stime,'%Y-%m-%d') = date_format(#{stime},'%Y-%m-%d')     </if>
		<if test="sstatus != null and sstatus != ''">      and res.sstatus = #{sstatus}     </if>
		<if test="workload != null and workload != ''">      and res.workload = #{workload}     </if>
		<if test="rworkload != null and rworkload != ''">      and res.rworkload = #{rworkload}     </if>
		<if test="cusername != null and cusername != ''">      and res.cusername = #{cusername}     </if>
		<if test="projectId != null and projectId != ''">      and res.project_id = #{projectId}     </if>
		<if test="branchId != null and branchId != ''">      and res.branch_id = #{branchId}     </if>
		<if test="ubranchId != null and ubranchId != ''">      and res.ubranch_id = #{ubranchId}     </if>
		<if test="sbillId != null and sbillId != ''">      and res.sbill_id = #{sbillId}     </if>
		<if test="detailId != null and detailId != ''">      and res.detail_id = #{detailId}     </if>
		<if test="menuId != null and menuId != ''">      and res.menu_id = #{menuId}     </if>
		<if test="productId != null and productId != ''">      and res.product_id = #{productId}     </if>
		<if test="caseId != null and caseId != ''">      and res.case_id = #{caseId}     </if>
		<if test="planId != null and planId != ''">      and res.plan_id = #{planId}     </if>
		<if test="bugId != null and bugId != ''">      and res.bug_id = #{bugId}     </if>
		<if test="bizType != null and bizType != ''">      and res.biz_type = #{bizType}     </if>
	</sql>
	<!--sql片段 更新字段 -->
	<sql id="set">
		userid = #{userid},
		username = #{username},
		ctime = #{ctime},
		task_id = #{taskId},
		cuserid = #{cuserid},
		biz_date = #{bizDate},
		wstatus = #{wstatus},
		remark = #{remark},
		ttype = #{ttype},
		stime = #{stime},
		sstatus = #{sstatus},
		workload = #{workload},
		rworkload = #{rworkload},
		cusername = #{cusername},
		project_id = #{projectId},
		branch_id = #{branchId},
		ubranch_id = #{ubranchId},
		sbill_id = #{sbillId},
		detail_id = #{detailId},
		menu_id = #{menuId},
		product_id = #{productId},
		case_id = #{caseId},
		plan_id = #{planId},
		bug_id = #{bugId},
		biz_type = #{bizType}
	</sql>
	<sql id="someFieldSet">
		<if test="userid != null and userid != ''"> userid = #{userid},     </if>
		<if test="username != null and username != ''"> username = #{username},     </if>
		<if test="ctime != null"> ctime = #{ctime},     </if>
		<if test="taskId != null and taskId != ''"> task_id = #{taskId},     </if>
		<if test="cuserid != null and cuserid != ''"> cuserid = #{cuserid},     </if>
		<if test="bizDate != null and bizDate != ''"> biz_date = #{bizDate},     </if>
		<if test="wstatus != null and wstatus != ''"> wstatus = #{wstatus},     </if>
		<if test="remark != null and remark != ''"> remark = #{remark},     </if>
		<if test="ttype != null and ttype != ''"> ttype = #{ttype},     </if>
		<if test="stime != null"> stime = #{stime},     </if>
		<if test="sstatus != null and sstatus != ''"> sstatus = #{sstatus},     </if>
		<if test="workload != null and workload != ''"> workload = #{workload},     </if>
		<if test="rworkload != null and rworkload != ''"> rworkload = #{rworkload},     </if>
		<if test="cusername != null and cusername != ''"> cusername = #{cusername},     </if>
		<if test="projectId != null and projectId != ''"> project_id = #{projectId},     </if>
		<if test="branchId != null and branchId != ''"> branch_id = #{branchId},     </if>
		<if test="ubranchId != null and ubranchId != ''"> ubranch_id = #{ubranchId},     </if>
		<if test="sbillId != null and sbillId != ''"> sbill_id = #{sbillId},     </if>
		<if test="detailId != null and detailId != ''"> detail_id = #{detailId},     </if>
		<if test="menuId != null and menuId != ''"> menu_id = #{menuId},     </if>
		<if test="productId != null and productId != ''"> product_id = #{productId},     </if>
		<if test="caseId != null and caseId != ''"> case_id = #{caseId},     </if>
		<if test="planId != null and planId != ''"> plan_id = #{planId},     </if>
		<if test="bugId != null and bugId != ''"> bug_id = #{bugId},     </if>
		<if test="bizType != null and bizType != ''"> biz_type = #{bizType},     </if>
	</sql>
	<!--sql片段 批量更新 -->
	<sql id="batchSet">
			userid = #{item.userid},
			username = #{item.username},
			ctime = #{item.ctime},
			task_id = #{item.taskId},
			cuserid = #{item.cuserid},
			biz_date = #{item.bizDate},
			wstatus = #{item.wstatus},
			remark = #{item.remark},
			ttype = #{item.ttype},
			stime = #{item.stime},
			sstatus = #{item.sstatus},
			workload = #{item.workload},
			rworkload = #{item.rworkload},
			cusername = #{item.cusername},
			project_id = #{item.projectId},
			branch_id = #{item.branchId},
			ubranch_id = #{item.ubranchId},
			sbill_id = #{item.sbillId},
			detail_id = #{item.detailId},
			menu_id = #{item.menuId},
			product_id = #{item.productId},
			case_id = #{item.caseId},
			plan_id = #{item.planId},
			bug_id = #{item.bugId},
			biz_type = #{item.bizType}
	</sql>
</mapper>