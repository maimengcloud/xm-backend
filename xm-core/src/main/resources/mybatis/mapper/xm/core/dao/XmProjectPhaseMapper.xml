<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xm.core.entity.XmProjectPhase">
	
	
	<!--开始 自定sql函数区域 请在此区域添加自定义函数,其它区域尽量不要动，因为代码随时重新生成 -->

    <sql id="whereForMap">
         <if test=" ids != null">  and (res.id) in
             <foreach collection="ids" item="item" index="index" open="(" separator="," close=")" >
                 ( #{item})
             </foreach>
         </if>
		<if test=" pidPathsList != null">  and
			<foreach collection="pidPathsList" item="item" index="index" open="(" separator=" or " close=")" >
				#{item} like concat(res.pid_paths,'%')
			</foreach>
		</if>
		<if test='iterationId!=null and iterationId!="" '>
			and exists( select 1 from xm_task t inner join xm_iteration_menu im on t.menu_id=im.menu_id where t.project_phase_id=res.id and im.iteration_id=#{iterationId})
		</if>
		<if test='productId!=null and productId!="" '>
			and exists( select 1 from xm_task t where t.product_id=#{productId})
		</if>
		<if test="key != null and key !='' ">       </if>
		<if test="isTop!=null and isTop!=''">
			and (res.parent_phase_id is null or res.parent_phase_id='')
		</if>
    </sql>
	<select id="selectTotalProjectAndPhaseBudgetCost" parameterType="HashMap" resultType="HashMap">
		SELECT
		sum( ifnull(res.phase_budget_workload,0) ) AS phase_budget_workload,
		sum( ifnull(res.phase_budget_nouser_at,0) ) AS phase_budget_nouser_at,
		sum( ifnull(res.phase_budget_inner_user_at,0) ) AS phase_budget_inner_user_at,
		sum( ifnull(res.phase_budget_out_user_at,0) ) AS phase_budget_out_user_at,
		sum( ifnull(res.phase_budget_at,0) ) AS phase_budget_at,
		p.plan_nouser_at,
		p.plan_inner_user_at,
		p.plan_out_user_at,
		p.locked,
		p.plan_workload,
		p.total_receivables,
		p.budget_margin_rate,
		p.contract_amt,
		p.plan_inner_user_price,
		p.plan_out_user_price,
		p.plan_out_user_cnt,
		p.plan_inner_user_cnt,
		p.plan_working_hours,
		p.plan_total_cost
		FROM
		XM.xm_project p
		LEFT JOIN 	XM.xm_project_phase res
		ON p.id = res.project_id and res.lvl=1
		<if test=" excludePhaseIds !=null "> and res.id not  in
			<foreach collection="excludePhaseIds" item="item" index="index" open="(" separator="," close=")" >
				#{item}
			</foreach>
		</if>
		where p.id=#{projectId}
	</select>

	<select id="selectTotalProductAndPhaseBudgetCost" parameterType="HashMap" resultType="HashMap">
		SELECT
		sum( ifnull(res.phase_budget_workload,0) ) AS phase_budget_workload,
		sum( ifnull(res.phase_budget_nouser_at,0) ) AS phase_budget_nouser_at,
		sum( ifnull(res.phase_budget_inner_user_at,0) ) AS phase_budget_inner_user_at,
		sum( ifnull(res.phase_budget_out_user_at,0) ) AS phase_budget_out_user_at,
		sum( ifnull(res.phase_budget_at,0) ) AS phase_budget_at,

		p.pbudget_workload,
		p.pbudget_amount,
		p.pmenu_budget_workload,
		p.pmenu_budget_amount
		FROM
		XM.xm_product p
		LEFT JOIN 	XM.xm_project_phase res
		ON p.id = res.product_id and res.lvl=1
		<if test=" excludePhaseIds !=null "> and res.id not  in
			<foreach collection="excludePhaseIds" item="item" index="index" open="(" separator="," close=")" >
				#{item}
			</foreach>
		</if>
		where p.id=#{productId}
	</select>
	<select id="selectPhaseBudgetCost" parameterType="HashMap" resultType="HashMap">
		select
		res2.id,
		res2.phase_budget_workload,
		res2.phase_budget_nouser_at,
		res2.phase_budget_inner_user_at,
		res2.phase_budget_out_user_at,
		res2.phase_budget_at,
		res0.child_phase_budget_workload,
		res0.child_phase_budget_nouser_at,
		res0.child_phase_budget_inner_user_at,
		res0.child_phase_budget_out_user_at,
		res0.child_phase_budget_at
		from xm_project_phase res2 left join
		(
		SELECT
		res.parent_phase_id,
		sum( ifnull(res.phase_budget_workload,0) ) AS child_phase_budget_workload,
		sum( ifnull(res.phase_budget_nouser_at,0) ) AS child_phase_budget_nouser_at,
		sum( ifnull(res.phase_budget_inner_user_at,0) ) AS child_phase_budget_inner_user_at,
		sum( ifnull(res.phase_budget_out_user_at,0) ) AS child_phase_budget_out_user_at,
		sum( ifnull(res.phase_budget_at,0) ) AS child_phase_budget_at,
		FROM  	xm_project_phase res  where res.parent_phase_id=#{id}
		<if test=" excludePhaseIds !=null "> and res.id not  in
			<foreach collection="excludePhaseIds" item="item" index="index" open="(" separator="," close=")" >
				#{item}
			</foreach>
		</if>
		group by res.parent_phase_id
		) as res0 on res2.parent_phase_id=res2.id
		where res2.id=#{id}
	</select>
	<update id="loadTasksToXmProjectPhase" parameterType="String" statementType="CALLABLE">
		{call load_tasks_to_xm_project_phase(#{projectId,mode=IN})}
	</update>
	<select id="checkExistsTask" parameterType="String" resultType="Long">
		select count(1) from xm_task t where t.project_phase_id=#{phaseId}
	</select>

	<select id="checkExistsChildren" parameterType="String" resultType="Long" >
		select count(1) from xm_project_phase res where res.parent_phase_id = #{id}
	</select>

	<update id="updatePhaseChildrenCntByPhaseId" parameterType="String">
		UPDATE xm_project_phase t
		LEFT JOIN ( SELECT count( 1 ) AS children_cnt, tt.parent_phase_id AS id FROM xm_project_phase tt WHERE tt.parent_phase_id = #{id} ) t2 ON t2.id = t.id
		SET t.children_cnt = ifnull( t2.children_cnt, 0 )
		WHERE
		t.id = #{id}
	</update>

	<update id="updateChildrenCntByIds" parameterType="List">
		UPDATE xm_project_phase t
		LEFT JOIN ( SELECT count( 1 ) AS children_cnt, tt.parent_phase_id AS id FROM xm_project_phase tt  WHERE
		(tt.parent_phase_id) in
		<foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
			( #{item})
		</foreach>
		group by tt.parent_phase_id ) t2 ON t2.id = t.id
		SET t.children_cnt = ifnull( t2.children_cnt, 0 )
		WHERE  (t.id) in
		<foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
			( #{item})
		</foreach>
	</update>

	<update id="sumParents" parameterType="List">
		<foreach collection="list" item="item" index="index" separator=";" >
		UPDATE XM.xm_project_phase res
		LEFT JOIN (
		SELECT
		t.project_id,
		t.parent_phase_id,
		count(1) as children_cnt,
		sum(t.phase_act_inner_user_workload) as phase_act_inner_user_workload,
		sum(t.phase_act_out_user_workload) as phase_act_out_user_workload,
		sum(t.phase_act_workload) as phase_act_workload,
		sum(t.act_inner_user_at) as act_inner_user_at,
		sum(t.act_out_user_at) as act_out_user_at,
		sum(ifnull(t.act_rate,0)*ifnull(t.task_budget_workload,0))/ifnull(sum(ifnull(t.task_budget_workload,0.000001)),999999) as act_rate,
		sum(t.task_budget_workload) as task_budget_workload,
		sum(t.task_budget_at) as task_budget_at
		FROM xm_project_phase t
		WHERE
		t.parent_phase_id=#{item}
		GROUP BY
		t.project_id,
		t.parent_phase_id
		) AS tc ON res.project_id = tc.project_id and res.id=tc.parent_phase_id
		SET res.phase_act_inner_user_workload = tc.phase_act_inner_user_workload,
		res.phase_act_out_user_workload = tc.phase_act_out_user_workload,
		res.phase_act_workload = tc.phase_act_workload,
		res.act_inner_user_at = tc.act_inner_user_at,
		res.act_out_user_at = tc.act_out_user_at,
		res.act_rate= tc.act_rate,
		res.task_budget_workload=tc.task_budget_workload,
		res.task_budget_at=tc.task_budget_at,
		res.calc_time=now(),
		res.children_cnt=ifnull(tc.children_cnt,0)
		where res.id=#{item} and res.ntype='1'
		</foreach>
	</update>
	<update id="batchSumParents" parameterType="List">
			UPDATE XM.xm_project_phase res
			LEFT JOIN (
			SELECT
			t.project_id,
			t.parent_phase_id,
			count(1) as children_cnt,
			sum(t.phase_act_inner_user_workload) as phase_act_inner_user_workload,
			sum(t.phase_act_out_user_workload) as phase_act_out_user_workload,
			sum(t.phase_act_workload) as phase_act_workload,
			sum(t.act_inner_user_at) as act_inner_user_at,
			sum(t.act_out_user_at) as act_out_user_at,
			sum(ifnull(t.act_rate,0)*ifnull(t.task_budget_workload,0))/ifnull(sum(ifnull(t.task_budget_workload,0.000001)),999999) as act_rate,
			sum(t.task_budget_workload) as task_budget_workload,
			sum(t.task_budget_at) as task_budget_at
			FROM xm_project_phase t
			WHERE
			t.parent_phase_id in
		<foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
			#{item}
		</foreach>
			GROUP BY
			t.project_id,
			t.parent_phase_id
			) AS tc ON res.project_id = tc.project_id and res.id=tc.parent_phase_id
			SET res.phase_act_inner_user_workload = tc.phase_act_inner_user_workload,
			res.phase_act_out_user_workload = tc.phase_act_out_user_workload,
			res.phase_act_workload = tc.phase_act_workload,
			res.act_inner_user_at = tc.act_inner_user_at,
			res.act_out_user_at = tc.act_out_user_at,
			res.act_rate= tc.act_rate,
			res.task_budget_workload=tc.task_budget_workload,
			res.task_budget_at=tc.task_budget_at,
			res.calc_time=now(),
			res.children_cnt=ifnull(tc.children_cnt,0)
			where res.id in
		<foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
			#{item}
		</foreach>
		and res.ntype='1'
	</update>
	<select id="selectListByIds" parameterType="List" resultType="com.xm.core.entity.XmProjectPhase">
		select * from xm_project_phase res where res.id in
		<foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
			#{item}
		</foreach>
	</select>
	<!--结束 自定义sql函数区域-->
	

	
	<!-- 通过条件查询获取数据列表 返回list<map> -->
	<select id="selectListMapByWhere" parameterType="HashMap" resultType="HashMap">
		select * from xm_project_phase res
		<where>
		    <include refid="whereForMap"/>
			<include refid="where"/>
		</where>
		order by res.seq_no asc
	</select>
	
	<!-- 通过条件查询获取数据列表 不分页 返回 list<Object> -->
	<select id="selectListByWhere" parameterType="com.xm.core.entity.XmProjectPhase" resultType="com.xm.core.entity.XmProjectPhase">
		select * from xm_project_phase res
		<where>
			<include refid="where"/>
		</where>
	</select>
	
		<!-- 通过主键查询获取数据对象 返回object -->
	<select id="selectOneObject" parameterType="com.xm.core.entity.XmProjectPhase" resultType="com.xm.core.entity.XmProjectPhase">
		select * from xm_project_phase res
		where 
			res.id = #{id}
	</select>
	
	<!-- 通过主键查询获取数据对象 返回map-->
	<select id="selectOneMap" parameterType="HashMap" resultType="HashMap">
		select * from xm_project_phase res
		where 
			 res.id = #{id}
	</select>
	<!-- 获取数据条目 返回long -->
	<select id="countByWhere" parameterType="com.xm.core.entity.XmProjectPhase" resultType="long">
		select count(1) from xm_project_phase res
		<where>
			<include refid="where"/>
		</where>
	</select>
	<!-- 新增一条记录  主键id,-->
	<insert id="insert" parameterType="com.xm.core.entity.XmProjectPhase" useGeneratedKeys="false"   keyProperty="id">
		insert into xm_project_phase(
			<include refid="columns"/>
		) values (
		#{id},#{phaseName},#{remark},#{parentPhaseId},#{branchId},#{projectId},#{beginDate},#{endDate},#{phaseBudgetHours},#{phaseBudgetStaffNu},#{ctime},#{phaseBudgetNouserAt},#{phaseBudgetInnerUserAt},#{phaseBudgetOutUserAt},#{projectBaselineId},#{bizProcInstId},#{bizFlowState},#{phaseBudgetWorkload},#{phaseActWorkload},#{phaseActInnerUserWorkload},#{phaseActOutUserWorkload},#{taskType},#{planType},#{seqNo},#{phaseBudgetInnerUserWorkload},#{phaseBudgetOutUserWorkload},#{actNouserAt},#{actInnerUserAt},#{phaseBudgetInnerUserPrice},#{phaseBudgetOutUserPrice},#{phaseBudgetOutUserCnt},#{phaseBudgetInnerUserCnt},#{actRate},#{phaseStatus},#{actOutUserAt},#{taskCnt},#{finishTaskCnt},#{iterationCnt},#{calcTime},#{taskBudgetWorkload},#{taskBudgetAt},#{mngUserid},#{mngUsername},#{milestone},#{pleaf},#{tagIds},#{tagNames},#{ntype},#{childrenCnt},#{ltime},#{isKeyPath},#{pidPaths},#{lvl},#{isTpl},#{phaseClass},#{productId}
		)
	</insert>
	
	<!-- 按条件删除若干条记录-->
	<delete id="deleteByWhere" parameterType="com.xm.core.entity.XmProjectPhase">
		delete from xm_project_phase res
		<where>  
			<include refid="where"/>
		</where>
	</delete>
	
	<!-- 按主键删除一条记录-->
	<delete id="deleteByPk" parameterType="com.xm.core.entity.XmProjectPhase">
		delete from xm_project_phase 
		where id = #{id} 
	</delete>
	
	<!-- 根据条件修改若干条记录 -->
	<update id="updateSomeFieldByPk" parameterType="com.xm.core.entity.XmProjectPhase">
		update  xm_project_phase 
		<set>
			<include refid="someFieldSet"/>
		</set>
		where id = #{id} 
	</update>
	
		<!-- 根据主键修改一条记录 -->
	<update id="updateByPk" parameterType="com.xm.core.entity.XmProjectPhase">
		update  xm_project_phase 
		<set>
			<include refid="set"/>
		</set>
		where id = #{id} 
	</update>

	<!-- 批量新增  批量插入 借用insert 循环插入实现
	<insert id="batchInsert" parameterType="List">
 	</insert>
 	-->
 	
	<!-- 批量更新 -->
	<update id="batchUpdate" parameterType="List">   
		<foreach collection="list" item="item" index="index" separator=";" >
   		update  xm_project_phase 
		set 
			<include refid="batchSet"/>
			where id = #{item.id}  
		</foreach> 
	</update>
	<!-- 批量删除 -->
	<delete id="batchDelete" parameterType="List">  
		delete from xm_project_phase 
			where
			(id) in
                <foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
                    (  #{item.id} )
                </foreach>
	</delete>
	
	
	<!--sql片段 列-->
	<sql id="columns">
		id,phase_name,remark,parent_phase_id,branch_id,project_id,begin_date,end_date,phase_budget_hours,phase_budget_staff_nu,ctime,phase_budget_nouser_at,phase_budget_inner_user_at,phase_budget_out_user_at,project_baseline_id,biz_proc_inst_id,biz_flow_state,phase_budget_workload,phase_act_workload,phase_act_inner_user_workload,phase_act_out_user_workload,task_type,plan_type,seq_no,phase_budget_inner_user_workload,phase_budget_out_user_workload,act_nouser_at,act_inner_user_at,phase_budget_inner_user_price,phase_budget_out_user_price,phase_budget_out_user_cnt,phase_budget_inner_user_cnt,act_rate,phase_status,act_out_user_at,task_cnt,finish_task_cnt,iteration_cnt,calc_time,task_budget_workload,task_budget_at,mng_userid,mng_username,milestone,pleaf,tag_ids,tag_names,ntype,children_cnt,ltime,is_key_path,pid_paths,lvl,is_tpl,phase_class,product_id
	</sql>

	<!--sql片段 动态条件 YYYY-MM-DD HH24:MI:SS-->
	<sql id="where">
		<if test="id != null and id != ''">      and res.id = #{id}     </if>
		<if test="phaseName != null and phaseName != ''">      and res.phase_name = #{phaseName}     </if>
		<if test="remark != null and remark != ''">      and res.remark = #{remark}     </if>
		<if test="parentPhaseId != null and parentPhaseId != ''">      and res.parent_phase_id = #{parentPhaseId}     </if>
		<if test="branchId != null and branchId != ''">      and res.branch_id = #{branchId}     </if>
		<if test="projectId != null and projectId != ''">      and res.project_id = #{projectId}     </if>
		<if test="beginDate != null">      and date_format(res.begin_date,'%Y-%m-%d') = date_format(#{beginDate},'%Y-%m-%d')     </if>
		<if test="endDate != null">      and date_format(res.end_date,'%Y-%m-%d') = date_format(#{endDate},'%Y-%m-%d')     </if>
		<if test="phaseBudgetHours != null and phaseBudgetHours != ''">      and res.phase_budget_hours = #{phaseBudgetHours}     </if>
		<if test="phaseBudgetStaffNu != null and phaseBudgetStaffNu != ''">      and res.phase_budget_staff_nu = #{phaseBudgetStaffNu}     </if>
		<if test="ctime != null">      and date_format(res.ctime,'%Y-%m-%d') = date_format(#{ctime},'%Y-%m-%d')     </if>
		<if test="phaseBudgetNouserAt != null and phaseBudgetNouserAt != ''">      and res.phase_budget_nouser_at = #{phaseBudgetNouserAt}     </if>
		<if test="phaseBudgetInnerUserAt != null and phaseBudgetInnerUserAt != ''">      and res.phase_budget_inner_user_at = #{phaseBudgetInnerUserAt}     </if>
		<if test="phaseBudgetOutUserAt != null and phaseBudgetOutUserAt != ''">      and res.phase_budget_out_user_at = #{phaseBudgetOutUserAt}     </if>
		<if test="projectBaselineId != null and projectBaselineId != ''">      and res.project_baseline_id = #{projectBaselineId}     </if>
		<if test="bizProcInstId != null and bizProcInstId != ''">      and res.biz_proc_inst_id = #{bizProcInstId}     </if>
		<if test="bizFlowState != null and bizFlowState != ''">      and res.biz_flow_state = #{bizFlowState}     </if>
		<if test="phaseBudgetWorkload != null and phaseBudgetWorkload != ''">      and res.phase_budget_workload = #{phaseBudgetWorkload}     </if>
		<if test="phaseActWorkload != null and phaseActWorkload != ''">      and res.phase_act_workload = #{phaseActWorkload}     </if>
		<if test="phaseActInnerUserWorkload != null and phaseActInnerUserWorkload != ''">      and res.phase_act_inner_user_workload = #{phaseActInnerUserWorkload}     </if>
		<if test="phaseActOutUserWorkload != null and phaseActOutUserWorkload != ''">      and res.phase_act_out_user_workload = #{phaseActOutUserWorkload}     </if>
		<if test="taskType != null and taskType != ''">      and res.task_type = #{taskType}     </if>
		<if test="planType != null and planType != ''">      and res.plan_type = #{planType}     </if>
		<if test="seqNo != null and seqNo != ''">      and res.seq_no = #{seqNo}     </if>
		<if test="phaseBudgetInnerUserWorkload != null and phaseBudgetInnerUserWorkload != ''">      and res.phase_budget_inner_user_workload = #{phaseBudgetInnerUserWorkload}     </if>
		<if test="phaseBudgetOutUserWorkload != null and phaseBudgetOutUserWorkload != ''">      and res.phase_budget_out_user_workload = #{phaseBudgetOutUserWorkload}     </if>
		<if test="actNouserAt != null and actNouserAt != ''">      and res.act_nouser_at = #{actNouserAt}     </if>
		<if test="actInnerUserAt != null and actInnerUserAt != ''">      and res.act_inner_user_at = #{actInnerUserAt}     </if>
		<if test="phaseBudgetInnerUserPrice != null and phaseBudgetInnerUserPrice != ''">      and res.phase_budget_inner_user_price = #{phaseBudgetInnerUserPrice}     </if>
		<if test="phaseBudgetOutUserPrice != null and phaseBudgetOutUserPrice != ''">      and res.phase_budget_out_user_price = #{phaseBudgetOutUserPrice}     </if>
		<if test="phaseBudgetOutUserCnt != null and phaseBudgetOutUserCnt != ''">      and res.phase_budget_out_user_cnt = #{phaseBudgetOutUserCnt}     </if>
		<if test="phaseBudgetInnerUserCnt != null and phaseBudgetInnerUserCnt != ''">      and res.phase_budget_inner_user_cnt = #{phaseBudgetInnerUserCnt}     </if>
		<if test="actRate != null and actRate != ''">      and res.act_rate = #{actRate}     </if>
		<if test="phaseStatus != null and phaseStatus != ''">      and res.phase_status = #{phaseStatus}     </if>
		<if test="actOutUserAt != null and actOutUserAt != ''">      and res.act_out_user_at = #{actOutUserAt}     </if>
		<if test="taskCnt != null and taskCnt != ''">      and res.task_cnt = #{taskCnt}     </if>
		<if test="finishTaskCnt != null and finishTaskCnt != ''">      and res.finish_task_cnt = #{finishTaskCnt}     </if>
		<if test="iterationCnt != null and iterationCnt != ''">      and res.iteration_cnt = #{iterationCnt}     </if>
		<if test="calcTime != null">      and date_format(res.calc_time,'%Y-%m-%d') = date_format(#{calcTime},'%Y-%m-%d')     </if>
		<if test="taskBudgetWorkload != null and taskBudgetWorkload != ''">      and res.task_budget_workload = #{taskBudgetWorkload}     </if>
		<if test="taskBudgetAt != null and taskBudgetAt != ''">      and res.task_budget_at = #{taskBudgetAt}     </if>
		<if test="mngUserid != null and mngUserid != ''">      and res.mng_userid = #{mngUserid}     </if>
		<if test="mngUsername != null and mngUsername != ''">      and res.mng_username = #{mngUsername}     </if>
		<if test="milestone != null and milestone != ''">      and res.milestone = #{milestone}     </if>
		<if test="pleaf != null and pleaf != ''">      and res.pleaf = #{pleaf}     </if>
		<if test="tagIds != null and tagIds != ''">      and res.tag_ids = #{tagIds}     </if>
		<if test="tagNames != null and tagNames != ''">      and res.tag_names = #{tagNames}     </if>
		<if test="ntype != null and ntype != ''">      and res.ntype = #{ntype}     </if>
		<if test="childrenCnt != null and childrenCnt != ''">      and res.children_cnt = #{childrenCnt}     </if>
		<if test="ltime != null">      and date_format(res.ltime,'%Y-%m-%d') = date_format(#{ltime},'%Y-%m-%d')     </if>
		<if test="isKeyPath != null and isKeyPath != ''">      and res.is_key_path = #{isKeyPath}     </if>
		<if test="pidPaths != null and pidPaths != ''">      and res.pid_paths = #{pidPaths}     </if>
		<if test="lvl != null and lvl != ''">      and res.lvl = #{lvl}     </if>
		<if test="isTpl != null and isTpl != ''">      and res.is_tpl = #{isTpl}     </if>
		<if test="phaseClass != null and phaseClass != ''">      and res.phase_class = #{phaseClass}     </if>
		<if test="productId != null and productId != ''">      and res.product_id = #{productId}     </if>
	</sql>
	<!--sql片段 更新字段 -->
	<sql id="set">
		phase_name = #{phaseName},
		remark = #{remark},
		parent_phase_id = #{parentPhaseId},
		branch_id = #{branchId},
		project_id = #{projectId},
		begin_date = #{beginDate},
		end_date = #{endDate},
		phase_budget_hours = #{phaseBudgetHours},
		phase_budget_staff_nu = #{phaseBudgetStaffNu},
		ctime = #{ctime},
		phase_budget_nouser_at = #{phaseBudgetNouserAt},
		phase_budget_inner_user_at = #{phaseBudgetInnerUserAt},
		phase_budget_out_user_at = #{phaseBudgetOutUserAt},
		project_baseline_id = #{projectBaselineId},
		biz_proc_inst_id = #{bizProcInstId},
		biz_flow_state = #{bizFlowState},
		phase_budget_workload = #{phaseBudgetWorkload},
		phase_act_workload = #{phaseActWorkload},
		phase_act_inner_user_workload = #{phaseActInnerUserWorkload},
		phase_act_out_user_workload = #{phaseActOutUserWorkload},
		task_type = #{taskType},
		plan_type = #{planType},
		seq_no = #{seqNo},
		phase_budget_inner_user_workload = #{phaseBudgetInnerUserWorkload},
		phase_budget_out_user_workload = #{phaseBudgetOutUserWorkload},
		act_nouser_at = #{actNouserAt},
		act_inner_user_at = #{actInnerUserAt},
		phase_budget_inner_user_price = #{phaseBudgetInnerUserPrice},
		phase_budget_out_user_price = #{phaseBudgetOutUserPrice},
		phase_budget_out_user_cnt = #{phaseBudgetOutUserCnt},
		phase_budget_inner_user_cnt = #{phaseBudgetInnerUserCnt},
		act_rate = #{actRate},
		phase_status = #{phaseStatus},
		act_out_user_at = #{actOutUserAt},
		task_cnt = #{taskCnt},
		finish_task_cnt = #{finishTaskCnt},
		iteration_cnt = #{iterationCnt},
		calc_time = #{calcTime},
		task_budget_workload = #{taskBudgetWorkload},
		task_budget_at = #{taskBudgetAt},
		mng_userid = #{mngUserid},
		mng_username = #{mngUsername},
		milestone = #{milestone},
		pleaf = #{pleaf},
		tag_ids = #{tagIds},
		tag_names = #{tagNames},
		ntype = #{ntype},
		children_cnt = #{childrenCnt},
		ltime = #{ltime},
		is_key_path = #{isKeyPath},
		pid_paths = #{pidPaths},
		lvl = #{lvl},
		is_tpl = #{isTpl},
		phase_class = #{phaseClass},
		product_id = #{productId}
	</sql>
	<sql id="someFieldSet">
		<if test="phaseName != null and phaseName != ''"> phase_name = #{phaseName},     </if>
		<if test="remark != null and remark != ''"> remark = #{remark},     </if>
		<if test="parentPhaseId != null and parentPhaseId != ''"> parent_phase_id = #{parentPhaseId},     </if>
		<if test="branchId != null and branchId != ''"> branch_id = #{branchId},     </if>
		<if test="projectId != null and projectId != ''"> project_id = #{projectId},     </if>
		<if test="beginDate != null"> begin_date = #{beginDate},     </if>
		<if test="endDate != null"> end_date = #{endDate},     </if>
		<if test="phaseBudgetHours != null and phaseBudgetHours != ''"> phase_budget_hours = #{phaseBudgetHours},     </if>
		<if test="phaseBudgetStaffNu != null and phaseBudgetStaffNu != ''"> phase_budget_staff_nu = #{phaseBudgetStaffNu},     </if>
		<if test="ctime != null"> ctime = #{ctime},     </if>
		<if test="phaseBudgetNouserAt != null and phaseBudgetNouserAt != ''"> phase_budget_nouser_at = #{phaseBudgetNouserAt},     </if>
		<if test="phaseBudgetInnerUserAt != null and phaseBudgetInnerUserAt != ''"> phase_budget_inner_user_at = #{phaseBudgetInnerUserAt},     </if>
		<if test="phaseBudgetOutUserAt != null and phaseBudgetOutUserAt != ''"> phase_budget_out_user_at = #{phaseBudgetOutUserAt},     </if>
		<if test="projectBaselineId != null and projectBaselineId != ''"> project_baseline_id = #{projectBaselineId},     </if>
		<if test="bizProcInstId != null and bizProcInstId != ''"> biz_proc_inst_id = #{bizProcInstId},     </if>
		<if test="bizFlowState != null and bizFlowState != ''"> biz_flow_state = #{bizFlowState},     </if>
		<if test="phaseBudgetWorkload != null and phaseBudgetWorkload != ''"> phase_budget_workload = #{phaseBudgetWorkload},     </if>
		<if test="phaseActWorkload != null and phaseActWorkload != ''"> phase_act_workload = #{phaseActWorkload},     </if>
		<if test="phaseActInnerUserWorkload != null and phaseActInnerUserWorkload != ''"> phase_act_inner_user_workload = #{phaseActInnerUserWorkload},     </if>
		<if test="phaseActOutUserWorkload != null and phaseActOutUserWorkload != ''"> phase_act_out_user_workload = #{phaseActOutUserWorkload},     </if>
		<if test="taskType != null and taskType != ''"> task_type = #{taskType},     </if>
		<if test="planType != null and planType != ''"> plan_type = #{planType},     </if>
		<if test="seqNo != null and seqNo != ''"> seq_no = #{seqNo},     </if>
		<if test="phaseBudgetInnerUserWorkload != null and phaseBudgetInnerUserWorkload != ''"> phase_budget_inner_user_workload = #{phaseBudgetInnerUserWorkload},     </if>
		<if test="phaseBudgetOutUserWorkload != null and phaseBudgetOutUserWorkload != ''"> phase_budget_out_user_workload = #{phaseBudgetOutUserWorkload},     </if>
		<if test="actNouserAt != null and actNouserAt != ''"> act_nouser_at = #{actNouserAt},     </if>
		<if test="actInnerUserAt != null and actInnerUserAt != ''"> act_inner_user_at = #{actInnerUserAt},     </if>
		<if test="phaseBudgetInnerUserPrice != null and phaseBudgetInnerUserPrice != ''"> phase_budget_inner_user_price = #{phaseBudgetInnerUserPrice},     </if>
		<if test="phaseBudgetOutUserPrice != null and phaseBudgetOutUserPrice != ''"> phase_budget_out_user_price = #{phaseBudgetOutUserPrice},     </if>
		<if test="phaseBudgetOutUserCnt != null and phaseBudgetOutUserCnt != ''"> phase_budget_out_user_cnt = #{phaseBudgetOutUserCnt},     </if>
		<if test="phaseBudgetInnerUserCnt != null and phaseBudgetInnerUserCnt != ''"> phase_budget_inner_user_cnt = #{phaseBudgetInnerUserCnt},     </if>
		<if test="actRate != null and actRate != ''"> act_rate = #{actRate},     </if>
		<if test="phaseStatus != null and phaseStatus != ''"> phase_status = #{phaseStatus},     </if>
		<if test="actOutUserAt != null and actOutUserAt != ''"> act_out_user_at = #{actOutUserAt},     </if>
		<if test="taskCnt != null and taskCnt != ''"> task_cnt = #{taskCnt},     </if>
		<if test="finishTaskCnt != null and finishTaskCnt != ''"> finish_task_cnt = #{finishTaskCnt},     </if>
		<if test="iterationCnt != null and iterationCnt != ''"> iteration_cnt = #{iterationCnt},     </if>
		<if test="calcTime != null"> calc_time = #{calcTime},     </if>
		<if test="taskBudgetWorkload != null and taskBudgetWorkload != ''"> task_budget_workload = #{taskBudgetWorkload},     </if>
		<if test="taskBudgetAt != null and taskBudgetAt != ''"> task_budget_at = #{taskBudgetAt},     </if>
		<if test="mngUserid != null and mngUserid != ''"> mng_userid = #{mngUserid},     </if>
		<if test="mngUsername != null and mngUsername != ''"> mng_username = #{mngUsername},     </if>
		<if test="milestone != null and milestone != ''"> milestone = #{milestone},     </if>
		<if test="pleaf != null and pleaf != ''"> pleaf = #{pleaf},     </if>
		<if test="tagIds != null and tagIds != ''"> tag_ids = #{tagIds},     </if>
		<if test="tagNames != null and tagNames != ''"> tag_names = #{tagNames},     </if>
		<if test="ntype != null and ntype != ''"> ntype = #{ntype},     </if>
		<if test="childrenCnt != null and childrenCnt != ''"> children_cnt = #{childrenCnt},     </if>
		<if test="ltime != null"> ltime = #{ltime},     </if>
		<if test="isKeyPath != null and isKeyPath != ''"> is_key_path = #{isKeyPath},     </if>
		<if test="pidPaths != null and pidPaths != ''"> pid_paths = #{pidPaths},     </if>
		<if test="lvl != null and lvl != ''"> lvl = #{lvl},     </if>
		<if test="isTpl != null and isTpl != ''"> is_tpl = #{isTpl},     </if>
		<if test="phaseClass != null and phaseClass != ''"> phase_class = #{phaseClass},     </if>
		<if test="productId != null and productId != ''"> product_id = #{productId},     </if>
	</sql>
	<!--sql片段 批量更新 -->
	<sql id="batchSet">
			phase_name = #{item.phaseName},
			remark = #{item.remark},
			parent_phase_id = #{item.parentPhaseId},
			branch_id = #{item.branchId},
			project_id = #{item.projectId},
			begin_date = #{item.beginDate},
			end_date = #{item.endDate},
			phase_budget_hours = #{item.phaseBudgetHours},
			phase_budget_staff_nu = #{item.phaseBudgetStaffNu},
			ctime = #{item.ctime},
			phase_budget_nouser_at = #{item.phaseBudgetNouserAt},
			phase_budget_inner_user_at = #{item.phaseBudgetInnerUserAt},
			phase_budget_out_user_at = #{item.phaseBudgetOutUserAt},
			project_baseline_id = #{item.projectBaselineId},
			biz_proc_inst_id = #{item.bizProcInstId},
			biz_flow_state = #{item.bizFlowState},
			phase_budget_workload = #{item.phaseBudgetWorkload},
			phase_act_workload = #{item.phaseActWorkload},
			phase_act_inner_user_workload = #{item.phaseActInnerUserWorkload},
			phase_act_out_user_workload = #{item.phaseActOutUserWorkload},
			task_type = #{item.taskType},
			plan_type = #{item.planType},
			seq_no = #{item.seqNo},
			phase_budget_inner_user_workload = #{item.phaseBudgetInnerUserWorkload},
			phase_budget_out_user_workload = #{item.phaseBudgetOutUserWorkload},
			act_nouser_at = #{item.actNouserAt},
			act_inner_user_at = #{item.actInnerUserAt},
			phase_budget_inner_user_price = #{item.phaseBudgetInnerUserPrice},
			phase_budget_out_user_price = #{item.phaseBudgetOutUserPrice},
			phase_budget_out_user_cnt = #{item.phaseBudgetOutUserCnt},
			phase_budget_inner_user_cnt = #{item.phaseBudgetInnerUserCnt},
			act_rate = #{item.actRate},
			phase_status = #{item.phaseStatus},
			act_out_user_at = #{item.actOutUserAt},
			task_cnt = #{item.taskCnt},
			finish_task_cnt = #{item.finishTaskCnt},
			iteration_cnt = #{item.iterationCnt},
			calc_time = #{item.calcTime},
			task_budget_workload = #{item.taskBudgetWorkload},
			task_budget_at = #{item.taskBudgetAt},
			mng_userid = #{item.mngUserid},
			mng_username = #{item.mngUsername},
			milestone = #{item.milestone},
			pleaf = #{item.pleaf},
			tag_ids = #{item.tagIds},
			tag_names = #{item.tagNames},
			ntype = #{item.ntype},
			children_cnt = #{item.childrenCnt},
			ltime = #{item.ltime},
			is_key_path = #{item.isKeyPath},
			pid_paths = #{item.pidPaths},
			lvl = #{item.lvl},
			is_tpl = #{item.isTpl},
			phase_class = #{item.phaseClass},
			product_id = #{item.productId}
	</sql>
</mapper>