<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xm.core.entity.XmProjectGroupUser">
	
	
	<!--开始 自定sql函数区域 请在此区域添加自定义函数,其它区域尽量不要动，因为代码随时重新生成 -->

    <sql id="whereForMap">
         <if test=" pkList != null">  and (res.group_id, res.userid) in
             <foreach collection="pkList" item="item" index="index" open="(" separator="," close=")" >
                ( #{item.groupId},  #{item.userid})
             </foreach>
         </if>
        <if test="key != null and key !='' ">       </if>
    </sql>
	<delete id="deleteByGroupId" parameterType="com.xm.core.entity.XmProjectGroupUser">
		delete from xm_project_group_user where group_id = #{groupId}
	</delete>

	<select id="selectListByWhereHead" parameterType="com.xm.core.entity.XmProjectGroupUser" resultType="com.xm.core.entity.XmProjectGroupUser">
		select * from xm_project_group_user res
		<where>
			<include refid="where"/>
		</where>
		order by is_head desc
	</select>

	<!-- 通过条件查询获取数据列表 不分页 返回 list<Object> -->
	<select id="selectGroupUserListByProjectId" parameterType="String" resultType="com.xm.core.entity.XmProjectGroupUser">
		select * from xm_project_group_user res
		<where>
			exists( select 1 from xm_project_group g where g.id=res.group_id and g.project_id=#{projectId})
		</where>
	</select>
	<select id="selectGroupUserListByProductId" parameterType="String" resultType="com.xm.core.entity.XmProjectGroupUser">
		select * from xm_project_group_user res
		<where>
			exists( select 1 from xm_project_group g where g.id=res.group_id and g.product_id=#{productId})
		</where>
	</select>

	<select id="selectListByIds" parameterType="List" resultType="com.xm.core.entity.XmProjectGroupUser">
		   select * from xm_project_group_user res where  (res.group_id, res.userid) in
			<foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
				( #{item.groupId},  #{item.userid})
			</foreach>
	</select>
	<!--结束 自定义sql函数区域-->
	

	
	<!-- 通过条件查询获取数据列表 返回list<map> -->
	<select id="selectListMapByWhere" parameterType="HashMap" resultType="HashMap">
		select * from xm_project_group_user res
		<where>
		    <include refid="whereForMap"/>
			<include refid="where"/>
		</where>
	</select>
	
	<!-- 通过条件查询获取数据列表 不分页 返回 list<Object> -->
	<select id="selectListByWhere" parameterType="com.xm.core.entity.XmProjectGroupUser" resultType="com.xm.core.entity.XmProjectGroupUser">
		select * from xm_project_group_user res
		<where>
			<include refid="where"/>
		</where>
	</select>
	
		<!-- 通过主键查询获取数据对象 返回object -->
	<select id="selectOneObject" parameterType="com.xm.core.entity.XmProjectGroupUser" resultType="com.xm.core.entity.XmProjectGroupUser">
		select * from xm_project_group_user res
		where 
			res.group_id = #{groupId}
			and res.userid = #{userid}
	</select>
	
	<!-- 通过主键查询获取数据对象 返回map-->
	<select id="selectOneMap" parameterType="HashMap" resultType="HashMap">
		select * from xm_project_group_user res
		where 
			 res.group_id = #{groupId}
			and  res.userid = #{userid}
	</select>
	<!-- 获取数据条目 返回long -->
	<select id="countByWhere" parameterType="com.xm.core.entity.XmProjectGroupUser" resultType="long">
		select count(1) from xm_project_group_user res
		<where>
			<include refid="where"/>
		</where>
	</select>
	<!-- 新增一条记录  主键group_id,userid,-->
	<insert id="insert" parameterType="com.xm.core.entity.XmProjectGroupUser" useGeneratedKeys="false"  >
		insert into xm_project_group_user(
			<include refid="columns"/>
		) values (
		#{joinTime},#{groupId},#{userid},#{username},#{outTime},#{status},#{obranchId},#{isPri},#{seqNo},#{projectId},#{productId},#{pgClass}
		)
	</insert>
	
	<!-- 按条件删除若干条记录-->
	<delete id="deleteByWhere" parameterType="com.xm.core.entity.XmProjectGroupUser">
		delete from xm_project_group_user res
		<where>  
			<include refid="where"/>
		</where>
	</delete>
	
	<!-- 按主键删除一条记录-->
	<delete id="deleteByPk" parameterType="com.xm.core.entity.XmProjectGroupUser">
		delete from xm_project_group_user 
		where group_id = #{groupId} and userid = #{userid} 
	</delete>
	
	<!-- 根据条件修改若干条记录 -->
	<update id="updateSomeFieldByPk" parameterType="com.xm.core.entity.XmProjectGroupUser">
		update  xm_project_group_user 
		<set>
			<include refid="someFieldSet"/>
		</set>
		where group_id = #{groupId} and userid = #{userid} 
	</update>
	
		<!-- 根据主键修改一条记录 -->
	<update id="updateByPk" parameterType="com.xm.core.entity.XmProjectGroupUser">
		update  xm_project_group_user 
		<set>
			<include refid="set"/>
		</set>
		where group_id = #{groupId} and userid = #{userid} 
	</update>

	<!-- 批量新增  批量插入 借用insert 循环插入实现
	<insert id="batchInsert" parameterType="List">
 	</insert>
 	-->
 	
	<!-- 批量更新 -->
	<update id="batchUpdate" parameterType="List">   
		<foreach collection="list" item="item" index="index" separator=";" >
   		update  xm_project_group_user 
		set 
			<include refid="batchSet"/>
			where group_id = #{item.groupId} and userid = #{item.userid}  
		</foreach> 
	</update>
	<!-- 批量删除 -->
	<delete id="batchDelete" parameterType="List">  
		delete from xm_project_group_user 
			where
			(group_id, userid) in
                <foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
                    (  #{item.groupId},  #{item.userid} )
                </foreach>
	</delete>
	
	
	<!--sql片段 列-->
	<sql id="columns">
		join_time,group_id,userid,username,out_time,status,obranch_id,is_pri,seq_no,project_id,product_id,pg_class
	</sql>

	<!--sql片段 动态条件 YYYY-MM-DD HH24:MI:SS-->
	<sql id="where">
		<if test="joinTime != null">      and date_format(res.join_time,'%Y-%m-%d') = date_format(#{joinTime},'%Y-%m-%d')     </if>
		<if test="groupId != null and groupId != ''">      and res.group_id = #{groupId}     </if>
		<if test="userid != null and userid != ''">      and res.userid = #{userid}     </if>
		<if test="username != null and username != ''">      and res.username = #{username}     </if>
		<if test="outTime != null">      and date_format(res.out_time,'%Y-%m-%d') = date_format(#{outTime},'%Y-%m-%d')     </if>
		<if test="status != null and status != ''">      and res.status = #{status}     </if>
		<if test="obranchId != null and obranchId != ''">      and res.obranch_id = #{obranchId}     </if>
		<if test="isPri != null and isPri != ''">      and res.is_pri = #{isPri}     </if>
		<if test="seqNo != null and seqNo != ''">      and res.seq_no = #{seqNo}     </if>
		<if test="projectId != null and projectId != ''">      and res.project_id = #{projectId}     </if>
		<if test="productId != null and productId != ''">      and res.product_id = #{productId}     </if>
		<if test="pgClass != null and pgClass != ''">      and res.pg_class = #{pgClass}     </if>
	</sql>
	<!--sql片段 更新字段 -->
	<sql id="set">
		join_time = #{joinTime},
		username = #{username},
		out_time = #{outTime},
		status = #{status},
		obranch_id = #{obranchId},
		is_pri = #{isPri},
		seq_no = #{seqNo},
		project_id = #{projectId},
		product_id = #{productId},
		pg_class = #{pgClass}
	</sql>
	<sql id="someFieldSet">
		<if test="joinTime != null"> join_time = #{joinTime},     </if>
		<if test="username != null and username != ''"> username = #{username},     </if>
		<if test="outTime != null"> out_time = #{outTime},     </if>
		<if test="status != null and status != ''"> status = #{status},     </if>
		<if test="obranchId != null and obranchId != ''"> obranch_id = #{obranchId},     </if>
		<if test="isPri != null and isPri != ''"> is_pri = #{isPri},     </if>
		<if test="seqNo != null and seqNo != ''"> seq_no = #{seqNo},     </if>
		<if test="projectId != null and projectId != ''"> project_id = #{projectId},     </if>
		<if test="productId != null and productId != ''"> product_id = #{productId},     </if>
		<if test="pgClass != null and pgClass != ''"> pg_class = #{pgClass},     </if>
	</sql>
	<!--sql片段 批量更新 -->
	<sql id="batchSet">
			join_time = #{item.joinTime},
			username = #{item.username},
			out_time = #{item.outTime},
			status = #{item.status},
			obranch_id = #{item.obranchId},
			is_pri = #{item.isPri},
			seq_no = #{item.seqNo},
			project_id = #{item.projectId},
			product_id = #{item.productId},
			pg_class = #{item.pgClass}
	</sql>
</mapper>