<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xm.core.entity.XmMenu">
	
	
	<!--开始 自定sql函数区域 请在此区域添加自定义函数,其它区域尽量不要动，因为代码随时重新生成 -->

	<sql id="whereForMap">
		<if test=" menuIds != null">  and (res.menu_id) in
			<foreach collection="menuIds" item="item" index="index" open="(" separator="," close=")" >
				( #{item})
			</foreach>
		</if>
		<if test=" pidPathsList != null">  and
			<foreach collection="pidPathsList" item="item" index="index" open="(" separator=" or " close=")" >
				#{item} like concat(res.pid_paths,'%')
			</foreach>
		</if>
		<if test=" tagIdList != null"> and
			<foreach collection="tagIdList" item="item" index="index" open="(" separator=" or " close=")" >
				find_in_set(#{item},res.tag_ids)
			</foreach>
		</if>
		<if test=' iterationFilterType!=null and iterationFilterType!=""'>
			<if test='iterationFilterType=="not-join-any-iteration"'> and (res.iteration_id is  null or res.iteration_id ='') </if>
			<if test='iterationFilterType=="join-any-iteration"'> and ( res.iteration_id is not null and res.iteration_id !=''  ) </if>
			<if test='iterationFilterType=="join-curr-iteration"'>  and res.iteration_id=#{filterIterationId}   </if>
			<if test='iterationFilterType=="not-join-curr-iteration"'>  and res.iteration_id!=#{filterIterationId}   </if>
		</if>
		<if test=' taskFilterType!=null and taskFilterType!="" '>
			<if test='taskFilterType=="not-join-curr-project"'>
				and not exists(select 1 from xm_task t where  t.menu_id=res.menu_id and t.project_id=#{projectId})
			</if>
			<if test='taskFilterType=="not-join-any-project"'>
				and not exists(select 1 from xm_task t where  t.menu_id=res.menu_id)
			</if>
			<if test='taskFilterType=="join-any-project"'>
				and exists(select 1 from xm_task t where  t.menu_id=res.menu_id)
			</if>
			<if test='taskFilterType=="join-curr-project"'>
				and exists(select 1 from xm_task t where  t.menu_id=res.menu_id and t.project_id=#{projectId})
			</if>
		</if>
		<if test="key != null and key !='' ">  and res.menu_name like #{key}     </if>
		<if test="isTop!=null and isTop!=''">  and (res.pmenu_id is null or res.pmenu_id = '')</if>
		<if test=" linkProjectId!=null and linkProjectId!=''">  and
			exists (select 1 from xm_product_project_link link where link.product_id=res.product_id and link.project_id=#{linkProjectId})
		</if>
		<if test=" linkIterationId!=null and linkIterationId!=''">  and
			exists (select 1 from xm_iteration_link link where link.pro_id=res.product_id and link.iteration_id=#{linkIterationId})
		</if>
	</sql>

	<select id="selectExistIterationMenus" parameterType="HashMap" resultType="com.xm.core.entity.XmMenu">
		select  * from xm_menu res
		where res.menu_id  in
		<foreach collection="menuIds" item="item" index="index" open="(" separator="," close=")" >
			#{item}
		</foreach>
		and res.iteration_id is not null
	</select>
	<select id="queryTaskUsersByMenuId" parameterType="HashMap" resultType="HashMap">
		select distinct te.userid,te.username,t.executor_userid, t.executor_username from xm_task_execuser te inner join xm_task t on t.id=te.task_id
		where t.menu_id=#{menuId} and te.status !='8' and te.status !='7'
	</select>
	<select id="selectListMapByWhereWithState" parameterType="HashMap" resultType="HashMap">
		select res.*,s.*,i.iteration_name from xm_menu res left join xm_menu_state s on res.menu_id=s.menu_id left join xm_iteration i on res.iteration_id=i.id
		<where>
			<include refid="whereForMap"/>
			<include refid="where"/>
		</where>
		order by res.seq_no asc
	</select>
	<select id="selectListMapByWhereWithPlan" parameterType="HashMap" resultType="HashMap">
		select res.*,plan.* from xm_menu res left join xm_menu_plan plan on res.menu_id=plan.menu_id and plan.project_id=#{projectId}
		<where>
			<include refid="whereForMap"/>
			<include refid="where"/>
		</where>

		order by res.seq_no asc
	</select>


	<select id="selectListMapByWhereWithPhase" parameterType="HashMap" resultType="HashMap">
		select res.*,p.phase_name from xm_menu res left join xm_phase p on res.phase_id=p.id and res.product_id=p.product_id
		<where>
			<include refid="whereForMap"/>
			<include refid="where"/>
		</where>

		order by res.seq_no asc
	</select>

	<update id="updateMenuChildrenCntByMenuId" parameterType="String">
		UPDATE xm_menu t
		LEFT JOIN ( SELECT count( 1 ) AS children_cnt, tt.pmenu_id AS menu_id FROM xm_menu tt WHERE tt.pmenu_id = #{menuId} ) t2 ON t2.menu_id = t.menu_id
		SET t.children_cnt = ifnull( t2.children_cnt, 0 )
		WHERE
		t.menu_id = #{menuId}
	</update>



	<update id="updateChildrenCntByIds" parameterType="List">
		UPDATE xm_menu t
		LEFT JOIN ( SELECT count( 1 ) AS children_cnt, tt.pmenu_id AS menu_id FROM xm_menu tt  WHERE
		(tt.pmenu_id) in
		<foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
			( #{item})
		</foreach>
		group by tt.pmenu_id ) t2 ON t2.menu_id = t.menu_id
		SET t.children_cnt = ifnull( t2.children_cnt, 0 )
		WHERE  (t.menu_id) in
		<foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
			( #{item})
		</foreach>
	</update>
	<delete id="doBatchDeleteByProductIds" parameterType="List">
		delete from xm_menu where product_id in
		<foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
			#{item}
		</foreach>
	</delete>

	<select id="selectListByIds" parameterType="List" resultType="com.xm.core.entity.XmMenu">
		select (select sum(1) from xm_menu m where m.pmenu_id=res.menu_id ) as children_cnt,res.* from xm_menu res where res.menu_id in
		<foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
			#{item}
		</foreach>
	</select>

	<update id="batchUnIteration" parameterType="com.xm.core.vo.XmIterationMenuVo">
		update xm_menu res set res.iteration_id = null where res.menu_id in
		<foreach collection="menuIds" item="item" index="index" open="(" separator="," close=")" >
			#{item}
		</foreach>
		<if test="iterationId!=null and iterationId!=''">
			and res.iteration_id=#{iterationId}
		</if>
	</update>
	<update id="batchIteration" parameterType="com.xm.core.vo.XmIterationMenuVo">
		update xm_menu res set res.iteration_id = #{iterationId} where res.menu_id in
		<foreach collection="menuIds" item="item" index="index" open="(" separator="," close=")" >
			#{item}
		</foreach>
	</update>


	<update id="batchUnProductPhase" parameterType="com.xm.core.vo.XmPhaseMenusVo">
		update xm_menu res set res.phase_id = null where res.menu_id in
		<foreach collection="menuIds" item="item" index="index" open="(" separator="," close=")" >
			#{item}
		</foreach>
		<if test="phaseId!=null and phaseId!=''">
			and res.phase_id=#{phaseId}
		</if>
	</update>
	<update id="batchProductPhase" parameterType="com.xm.core.vo.XmPhaseMenusVo">
		update xm_menu res set res.phase_id = #{phaseId} where res.menu_id in
		<foreach collection="menuIds" item="item" index="index" open="(" separator="," close=")" >
			#{item}
		</foreach>
	</update>
	<select id="listTenMenuByProductIdAndIterationId" parameterType="String" resultType="com.xm.core.entity.XmMenu">
		select menu_name from xm_menu res where res.product_id=#{productId} and res.iteration_id=#{iterationId}
		limit 10
	</select>



	<update id="batchChangeParent" parameterType="HashMap">
		update   xm_menu res inner join (
		select t.menu_id,pid_paths,pmenu_id from xm_menu t where t.menu_id in
		<foreach collection="menuIds" item="item" index="index" open="(" separator="," close=")" >
			#{item}
		</foreach>
		) as t1 on res.pid_paths like concat(t1.pid_paths,'%')

		set res.pid_paths = replace(res.pid_paths,t1.pid_paths,concat(#{parentPidPaths},res.menu_id,',')),
		res.pmenu_id=if(res.menu_id=t1.menu_id,#{pmenuId},res.pmenu_id),
		res.lvl= LENGTH(replace(res.pid_paths,t1.pid_paths,concat(#{parentPidPaths},res.menu_id,',')))-LENGTH(REPLACE(replace(res.pid_paths,t1.pid_paths,concat(#{parentPidPaths},res.menu_id,',')),',',''))-1

	</update>
	<!--结束 自定义sql函数区域-->
	

	
	<!-- 通过条件查询获取数据列表 返回list<map> -->
	<select id="selectListMapByWhere" parameterType="HashMap" resultType="HashMap">
		select (select sum(1) from xm_menu m where m.pmenu_id=res.menu_id ) as children_cnt,res.* from xm_menu res left join xm_iteration i on res.iteration_id=i.id
		<where>
		    <include refid="whereForMap"/>
			<include refid="where"/>
		</where>
	</select>
	
	<!-- 通过条件查询获取数据列表 不分页 返回 list<Object> -->
	<select id="selectListByWhere" parameterType="com.xm.core.entity.XmMenu" resultType="com.xm.core.entity.XmMenu">
		select (select sum(1) from xm_menu m where m.pmenu_id=res.menu_id ) as children_cnt,res.* from xm_menu res
		<where>
			<include refid="where"/>
		</where>
	</select>
	
		<!-- 通过主键查询获取数据对象 返回object -->
	<select id="selectOneObject" parameterType="com.xm.core.entity.XmMenu" resultType="com.xm.core.entity.XmMenu">
		select (select sum(1) from xm_menu m where m.pmenu_id=res.menu_id ) as children_cnt,res.* from xm_menu res
		where 
			res.menu_id = #{menuId}
	</select>
	<!-- 通过主键查询获取数据对象 返回map-->
	<select id="selectOneMap" parameterType="HashMap" resultType="HashMap">
		select * from xm_menu res
		where 
			 res.menu_id = #{menuId}
	</select>
	<!-- 获取数据条目 返回long -->
	<select id="countByWhere" parameterType="com.xm.core.entity.XmMenu" resultType="long">
		select count(1) from xm_menu res
		<where>
			<include refid="where"/>
		</where>
	</select>
	<!-- 新增一条记录  主键menu_id,-->
	<insert id="insert" parameterType="com.xm.core.entity.XmMenu" useGeneratedKeys="false"   keyProperty="menu_id">
		insert into xm_menu(
			<include refid="columns"/>
		) values (
		#{menuId},#{menuName},#{pmenuId},#{productId},#{remark},#{status},#{online},#{demandUrl},#{codeUrl},#{designUrl},#{docUrl},#{helpUrl},#{operDocUrl},#{seqNo},#{mmUserid},#{mmUsername},#{ctime},#{ntype},#{sinceVersion},#{childrenCnt},#{ltime},#{tagIds},#{tagNames},#{pidPaths},#{lvl},#{isTpl},#{budgetHours},#{budgetStaffNu},#{budgetWorkload},#{budgetAmount},#{phaseId},#{iterationId},#{calcType},#{mactWorkload},#{mactAmount},#{mactRate}
		)
	</insert>
	
	<!-- 按条件删除若干条记录-->
	<delete id="deleteByWhere" parameterType="com.xm.core.entity.XmMenu">
		delete from xm_menu res
		<where>  
			<include refid="where"/>
		</where>
	</delete>
	
	<!-- 按主键删除一条记录-->
	<delete id="deleteByPk" parameterType="com.xm.core.entity.XmMenu">
		delete from xm_menu 
		where menu_id = #{menuId} 
	</delete>
	
	<!-- 根据条件修改若干条记录 -->
	<update id="updateSomeFieldByPk" parameterType="com.xm.core.entity.XmMenu">
		update  xm_menu 
		<set>
			<include refid="someFieldSet"/>
		</set>
		where menu_id = #{menuId} 
	</update>
	
		<!-- 根据主键修改一条记录 -->
	<update id="updateByPk" parameterType="com.xm.core.entity.XmMenu">
		update  xm_menu 
		<set>
			<include refid="set"/>
		</set>
		where menu_id = #{menuId} 
	</update>

	<!-- 批量新增  批量插入 借用insert 循环插入实现
	<insert id="batchInsert" parameterType="List">
 	</insert>
 	-->
 	
	<!-- 批量更新 -->
	<update id="batchUpdate" parameterType="List">   
		<foreach collection="list" item="item" index="index" separator=";" >
   		update  xm_menu 
		set 
			<include refid="batchSet"/>
			where menu_id = #{item.menuId}  
		</foreach> 
	</update>
	<!-- 批量删除 -->
	<delete id="batchDelete" parameterType="List">  
		delete from xm_menu 
			where
			(menu_id) in
                <foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
                    (  #{item.menuId} )
                </foreach>
	</delete>
	
	
	<!--sql片段 列-->
	<sql id="columns">
		menu_id,menu_name,pmenu_id,product_id,remark,status,online,demand_url,code_url,design_url,doc_url,help_url,oper_doc_url,seq_no,mm_userid,mm_username,ctime,ntype,since_version,children_cnt,ltime,tag_ids,tag_names,pid_paths,lvl,is_tpl,budget_hours,budget_staff_nu,budget_workload,budget_amount,phase_id,iteration_id,calc_type,mact_workload,mact_amount,mact_rate
	</sql>

	<!--sql片段 动态条件 YYYY-MM-DD HH24:MI:SS-->
	<sql id="where">
		<if test="menuId != null and menuId != ''">      and res.menu_id = #{menuId}     </if>
		<if test="menuName != null and menuName != ''">      and res.menu_name = #{menuName}     </if>
		<if test="pmenuId != null and pmenuId != ''">      and res.pmenu_id = #{pmenuId}     </if>
		<if test="productId != null and productId != ''">      and res.product_id = #{productId}     </if>
		<if test="remark != null and remark != ''">      and res.remark = #{remark}     </if>
		<if test="status != null and status != ''">      and res.status = #{status}     </if>
		<if test="online != null and online != ''">      and res.online = #{online}     </if>
		<if test="demandUrl != null and demandUrl != ''">      and res.demand_url = #{demandUrl}     </if>
		<if test="codeUrl != null and codeUrl != ''">      and res.code_url = #{codeUrl}     </if>
		<if test="designUrl != null and designUrl != ''">      and res.design_url = #{designUrl}     </if>
		<if test="docUrl != null and docUrl != ''">      and res.doc_url = #{docUrl}     </if>
		<if test="helpUrl != null and helpUrl != ''">      and res.help_url = #{helpUrl}     </if>
		<if test="operDocUrl != null and operDocUrl != ''">      and res.oper_doc_url = #{operDocUrl}     </if>
		<if test="seqNo != null and seqNo != ''">      and res.seq_no = #{seqNo}     </if>
		<if test="mmUserid != null and mmUserid != ''">      and res.mm_userid = #{mmUserid}     </if>
		<if test="mmUsername != null and mmUsername != ''">      and res.mm_username = #{mmUsername}     </if>
		<if test="ctime != null">      and date_format(res.ctime,'%Y-%m-%d') = date_format(#{ctime},'%Y-%m-%d')     </if>
		<if test="ntype != null and ntype != ''">      and res.ntype = #{ntype}     </if>
		<if test="sinceVersion != null and sinceVersion != ''">      and res.since_version = #{sinceVersion}     </if>
		<if test="childrenCnt != null and childrenCnt != ''">      and res.children_cnt = #{childrenCnt}     </if>
		<if test="ltime != null">      and date_format(res.ltime,'%Y-%m-%d') = date_format(#{ltime},'%Y-%m-%d')     </if>
		<if test="tagIds != null and tagIds != ''">      and res.tag_ids = #{tagIds}     </if>
		<if test="tagNames != null and tagNames != ''">      and res.tag_names = #{tagNames}     </if>
		<if test="pidPaths != null and pidPaths != ''">      and res.pid_paths = #{pidPaths}     </if>
		<if test="lvl != null and lvl != ''">      and res.lvl = #{lvl}     </if>
		<if test="isTpl != null and isTpl != ''">      and res.is_tpl = #{isTpl}     </if>
		<if test="budgetHours != null and budgetHours != ''">      and res.budget_hours = #{budgetHours}     </if>
		<if test="budgetStaffNu != null and budgetStaffNu != ''">      and res.budget_staff_nu = #{budgetStaffNu}     </if>
		<if test="budgetWorkload != null and budgetWorkload != ''">      and res.budget_workload = #{budgetWorkload}     </if>
		<if test="budgetAmount != null and budgetAmount != ''">      and res.budget_amount = #{budgetAmount}     </if>
		<if test="phaseId != null and phaseId != ''">      and res.phase_id = #{phaseId}     </if>
		<if test="iterationId != null and iterationId != ''">      and res.iteration_id = #{iterationId}     </if>
		<if test="calcType != null and calcType != ''">      and res.calc_type = #{calcType}     </if>
		<if test="mactWorkload != null and mactWorkload != ''">      and res.mact_workload = #{mactWorkload}     </if>
		<if test="mactAmount != null and mactAmount != ''">      and res.mact_amount = #{mactAmount}     </if>
		<if test="mactRate != null and mactRate != ''">      and res.mact_rate = #{mactRate}     </if>
	</sql>
	<!--sql片段 更新字段 -->
	<sql id="set">
		menu_name = #{menuName},
		pmenu_id = #{pmenuId},
		product_id = #{productId},
		remark = #{remark},
		status = #{status},
		online = #{online},
		demand_url = #{demandUrl},
		code_url = #{codeUrl},
		design_url = #{designUrl},
		doc_url = #{docUrl},
		help_url = #{helpUrl},
		oper_doc_url = #{operDocUrl},
		seq_no = #{seqNo},
		mm_userid = #{mmUserid},
		mm_username = #{mmUsername},
		ctime = #{ctime},
		ntype = #{ntype},
		since_version = #{sinceVersion},
		children_cnt = #{childrenCnt},
		ltime = #{ltime},
		tag_ids = #{tagIds},
		tag_names = #{tagNames},
		pid_paths = #{pidPaths},
		lvl = #{lvl},
		is_tpl = #{isTpl},
		budget_hours = #{budgetHours},
		budget_staff_nu = #{budgetStaffNu},
		budget_workload = #{budgetWorkload},
		budget_amount = #{budgetAmount},
		phase_id = #{phaseId},
		iteration_id = #{iterationId},
		calc_type = #{calcType},
		mact_workload = #{mactWorkload},
		mact_amount = #{mactAmount},
		mact_rate = #{mactRate}
	</sql>
	<sql id="someFieldSet">
		<if test="menuName != null and menuName != ''"> menu_name = #{menuName},     </if>
		<if test="pmenuId != null and pmenuId != ''"> pmenu_id = #{pmenuId},     </if>
		<if test="productId != null and productId != ''"> product_id = #{productId},     </if>
		<if test="remark != null and remark != ''"> remark = #{remark},     </if>
		<if test="status != null and status != ''"> status = #{status},     </if>
		<if test="online != null and online != ''"> online = #{online},     </if>
		<if test="demandUrl != null and demandUrl != ''"> demand_url = #{demandUrl},     </if>
		<if test="codeUrl != null and codeUrl != ''"> code_url = #{codeUrl},     </if>
		<if test="designUrl != null and designUrl != ''"> design_url = #{designUrl},     </if>
		<if test="docUrl != null and docUrl != ''"> doc_url = #{docUrl},     </if>
		<if test="helpUrl != null and helpUrl != ''"> help_url = #{helpUrl},     </if>
		<if test="operDocUrl != null and operDocUrl != ''"> oper_doc_url = #{operDocUrl},     </if>
		<if test="seqNo != null and seqNo != ''"> seq_no = #{seqNo},     </if>
		<if test="mmUserid != null and mmUserid != ''"> mm_userid = #{mmUserid},     </if>
		<if test="mmUsername != null and mmUsername != ''"> mm_username = #{mmUsername},     </if>
		<if test="ctime != null"> ctime = #{ctime},     </if>
		<if test="ntype != null and ntype != ''"> ntype = #{ntype},     </if>
		<if test="sinceVersion != null and sinceVersion != ''"> since_version = #{sinceVersion},     </if>
		<if test="childrenCnt != null and childrenCnt != ''"> children_cnt = #{childrenCnt},     </if>
		<if test="ltime != null"> ltime = #{ltime},     </if>
		<if test="tagIds != null and tagIds != ''"> tag_ids = #{tagIds},     </if>
		<if test="tagNames != null and tagNames != ''"> tag_names = #{tagNames},     </if>
		<if test="pidPaths != null and pidPaths != ''"> pid_paths = #{pidPaths},     </if>
		<if test="lvl != null and lvl != ''"> lvl = #{lvl},     </if>
		<if test="isTpl != null and isTpl != ''"> is_tpl = #{isTpl},     </if>
		<if test="budgetHours != null and budgetHours != ''"> budget_hours = #{budgetHours},     </if>
		<if test="budgetStaffNu != null and budgetStaffNu != ''"> budget_staff_nu = #{budgetStaffNu},     </if>
		<if test="budgetWorkload != null and budgetWorkload != ''"> budget_workload = #{budgetWorkload},     </if>
		<if test="budgetAmount != null and budgetAmount != ''"> budget_amount = #{budgetAmount},     </if>
		<if test="phaseId != null and phaseId != ''"> phase_id = #{phaseId},     </if>
		<if test="iterationId != null and iterationId != ''"> iteration_id = #{iterationId},     </if>
		<if test="calcType != null and calcType != ''"> calc_type = #{calcType},     </if>
		<if test="mactWorkload != null and mactWorkload != ''"> mact_workload = #{mactWorkload},     </if>
		<if test="mactAmount != null and mactAmount != ''"> mact_amount = #{mactAmount},     </if>
		<if test="mactRate != null and mactRate != ''"> mact_rate = #{mactRate},     </if>
	</sql>
	<!--sql片段 批量更新 -->
	<sql id="batchSet">
			menu_name = #{item.menuName},
			pmenu_id = #{item.pmenuId},
			product_id = #{item.productId},
			remark = #{item.remark},
			status = #{item.status},
			online = #{item.online},
			demand_url = #{item.demandUrl},
			code_url = #{item.codeUrl},
			design_url = #{item.designUrl},
			doc_url = #{item.docUrl},
			help_url = #{item.helpUrl},
			oper_doc_url = #{item.operDocUrl},
			seq_no = #{item.seqNo},
			mm_userid = #{item.mmUserid},
			mm_username = #{item.mmUsername},
			ctime = #{item.ctime},
			ntype = #{item.ntype},
			since_version = #{item.sinceVersion},
			children_cnt = #{item.childrenCnt},
			ltime = #{item.ltime},
			tag_ids = #{item.tagIds},
			tag_names = #{item.tagNames},
			pid_paths = #{item.pidPaths},
			lvl = #{item.lvl},
			is_tpl = #{item.isTpl},
			budget_hours = #{item.budgetHours},
			budget_staff_nu = #{item.budgetStaffNu},
			budget_workload = #{item.budgetWorkload},
			budget_amount = #{item.budgetAmount},
			phase_id = #{item.phaseId},
			iteration_id = #{item.iterationId},
			calc_type = #{item.calcType},
			mact_workload = #{item.mactWorkload},
			mact_amount = #{item.mactAmount},
			mact_rate = #{item.mactRate}
	</sql>
</mapper>