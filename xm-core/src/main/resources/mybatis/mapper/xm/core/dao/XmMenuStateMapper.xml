<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xm.core.entity.XmMenuState">
	
	
	<!--开始 自定sql函数区域 请在此区域添加自定义函数,其它区域尽量不要动，因为代码随时重新生成 -->

    <sql id="whereForMap">
         <if test=" menuIds != null">  and (res.menu_id) in
             <foreach collection="menuIds" item="item" index="index" open="(" separator="," close=")" >
                 ( #{item})
             </foreach>
         </if>
        <if test="key != null and key !='' ">       </if>
    </sql>

	<update id="loadTasksToXmMenuState" parameterType="String" statementType="CALLABLE">
		{call load_tasks_to_xm_menu_state(#{productId,mode=IN})}
	</update>


	<!-- 适合没有交叉的，没用父子关系的一批任务的更新 -->
	<update id="batchSumParents" parameterType="List">
		update xm_menu_state s  left join
		(select m.pmenu_id,
		sum(ss.budget_workload) as budget_workload ,
		sum(ss.budget_iuser_workload) as budget_iuser_workload ,
		sum(ss.budget_ouser_workload) as budget_ouser_workload ,
		sum(ss.budget_at) as budget_at ,
		sum(ss.budget_iuser_at) as budget_iuser_at ,
		sum(ss.budget_ouser_at) as budget_ouser_at ,

		sum(ss.act_workload) as act_workload ,
		sum(ss.act_iuser_workload) as act_iuser_workload ,
		sum(ss.act_ouser_workload) as act_ouser_workload ,
		sum(ss.act_at) as act_at ,
		sum(ss.act_iuser_at) as act_iuser_at ,
		sum(ss.act_ouser_at) as act_ouser_at ,

		sum(ifnull(ss.finish_rate,0))/count(1) as raw_rate ,

		sum(ss.task_cnt) as task_cnt ,
		sum(ss.task_unstart_cnt) as task_unstart_cnt ,
		sum(ss.task_exec_cnt) as task_exec_cnt ,
		sum(ss.task_finish_cnt) as task_finish_cnt ,
		sum(ss.task_set_cnt) as task_set_cnt ,
		sum(ss.task_close_cnt) as task_close_cnt ,


		sum(ss.test_cases) as test_cases ,
		sum(ss.exec_cases) as exec_cases ,
		sum(ss.design_cases) as design_cases ,
		sum(ss.finish_cases) as finish_cases ,


		sum(ss.bug_cnt) as bug_cnt ,
		sum(ss.active_bugs) as active_bugs ,
		sum(ss.confirmed_bugs) as confirmed_bugs ,
		sum(ss.resolved_bugs) as resolved_bugs ,
		sum(ss.closed_bugs) as closed_bugs,

		min(ss.min_start_time) as min_start_time,
		max(ss.max_end_time) as max_end_time
		from xm_menu_state ss inner join xm_menu m on ss.menu_id=m.menu_id   where m.pmenu_id in
		<foreach collection="list" index="index" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>

		group by m.pmenu_id) s2 on s2.pmenu_id=s.menu_id inner join xm_menu xmm on xmm.menu_id=s.menu_id
		set
		s.budget_workload=ifnull(s2.budget_workload,0),
		s.budget_iuser_workload=ifnull(s2.budget_iuser_workload,0),
		s.budget_ouser_workload=ifnull(s2.budget_ouser_workload,0),
		s.budget_at=ifnull(s2.budget_at,0),
		s.budget_iuser_at=ifnull(s2.budget_iuser_at,0),
		s.budget_ouser_at=ifnull(s2.budget_ouser_at,0),

		s.act_workload=ifnull(s2.act_workload,0),
		s.act_iuser_workload=ifnull(s2.act_iuser_workload,0),
		s.act_ouser_workload=ifnull(s2.act_ouser_workload,0),
		s.act_at=ifnull(s2.act_at,0),
		s.act_iuser_at=ifnull(s2.act_iuser_at,0),
		s.act_ouser_at=ifnull(s2.act_ouser_at,0),

		s.finish_rate=case when  ifnull(s2.budget_workload,0)  >0
		then 100*(ifnull(s2.act_workload,0)) / s2.budget_workload
		when ifnull(s2.act_workload,0)>0 then 100
		else  0  end,

		s.task_cnt=ifnull(s2.task_cnt,0),
		s.task_unstart_cnt=ifnull(s2.task_unstart_cnt,0),
		s.task_finish_cnt=ifnull(s2.task_finish_cnt,0),
		s.task_set_cnt=ifnull(s2.task_set_cnt,0),
		s.task_close_cnt=ifnull(s2.task_close_cnt,0),


		s.test_cases=ifnull(s2.test_cases,0),
		s.exec_cases=ifnull(s2.exec_cases,0),
		s.design_cases=ifnull(s2.design_cases,0),
		s.finish_cases=ifnull(s2.finish_cases,0),

		s.bug_cnt=ifnull(s2.bug_cnt,0),
		s.active_bugs=ifnull(s2.active_bugs,0),
		s.confirmed_bugs=ifnull(s2.confirmed_bugs,0),
		s.resolved_bugs=ifnull(s2.resolved_bugs,0),
		s.closed_bugs=ifnull(s2.closed_bugs,0),
		xmm.children_cnt=ifnull(s2.children_cnt,0),
		s.min_start_time=s2.min_start_time,
		s.max_end_time=s2.max_end_time,
		xmm.start_time=s2.min_start_time,
		xmm.end_time=s2.max_end_time
		where s.menu_id in
		<foreach collection="list" index="index" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</update>
	<!-- 适合父子关系的一批任务的更新 -->
	<update id="sumParents" parameterType="List">
		<foreach collection="list" item="item" index="index" open="" separator=";" close="" >
			update xm_menu_state s  left join
			(select m.pmenu_id,
			count(1) as children_cnt,
			sum(ss.budget_workload) as budget_workload ,
			sum(ss.budget_iuser_workload) as budget_iuser_workload ,
			sum(ss.budget_ouser_workload) as budget_ouser_workload ,
			sum(ss.budget_at) as budget_at ,
			sum(ss.budget_iuser_at) as budget_iuser_at ,
			sum(ss.budget_ouser_at) as budget_ouser_at ,

			sum(ss.act_workload) as act_workload ,
			sum(ss.act_iuser_workload) as act_iuser_workload ,
			sum(ss.act_ouser_workload) as act_ouser_workload ,
			sum(ss.act_at) as act_at ,
			sum(ss.act_iuser_at) as act_iuser_at ,
			sum(ss.act_ouser_at) as act_ouser_at ,

			sum(ifnull(ss.finish_rate,0))/count(1) as raw_rate ,

			sum(ss.task_cnt) as task_cnt ,
			sum(ss.task_unstart_cnt) as task_unstart_cnt ,
			sum(ss.task_exec_cnt) as task_exec_cnt ,
			sum(ss.task_finish_cnt) as task_finish_cnt ,
			sum(ss.task_set_cnt) as task_set_cnt ,
			sum(ss.task_close_cnt) as task_close_cnt ,


			sum(ss.test_cases) as test_cases ,
			sum(ss.exec_cases) as exec_cases ,
			sum(ss.design_cases) as design_cases ,
			sum(ss.finish_cases) as finish_cases ,


			sum(ss.bug_cnt) as bug_cnt ,
			sum(ss.active_bugs) as active_bugs ,
			sum(ss.confirmed_bugs) as confirmed_bugs ,
			sum(ss.resolved_bugs) as resolved_bugs ,
			sum(ss.closed_bugs) as closed_bugs,

			min(ss.min_start_time) as min_start_time,
			max(ss.max_end_time) as max_end_time
			from xm_menu_state ss inner join xm_menu m on ss.menu_id=m.menu_id   where m.pmenu_id =#{item}

			group by m.pmenu_id) s2 on s2.pmenu_id=s.menu_id inner join xm_menu xmm on s.menu_id=xmm.menu_id
			set
			s.budget_workload=ifnull(s2.budget_workload,0),
			s.budget_iuser_workload=ifnull(s2.budget_iuser_workload,0),
			s.budget_ouser_workload=ifnull(s2.budget_ouser_workload,0),
			s.budget_at=ifnull(s2.budget_at,0),
			s.budget_iuser_at=ifnull(s2.budget_iuser_at,0),
			s.budget_ouser_at=ifnull(s2.budget_ouser_at,0),

			s.act_workload=ifnull(s2.act_workload,0),
			s.act_iuser_workload=ifnull(s2.act_iuser_workload,0),
			s.act_ouser_workload=ifnull(s2.act_ouser_workload,0),
			s.act_at=ifnull(s2.act_at,0),
			s.act_iuser_at=ifnull(s2.act_iuser_at,0),
			s.act_ouser_at=ifnull(s2.act_ouser_at,0),

			s.finish_rate=case when  ifnull(s2.budget_workload,0)  >0
			then 100*(ifnull(s2.act_workload,0)) / s2.budget_workload
			when ifnull(s2.act_workload,0)>0 then 100
			else  0  end,

			s.task_cnt=ifnull(s2.task_cnt,0),
			s.task_unstart_cnt=ifnull(s2.task_unstart_cnt,0),
			s.task_finish_cnt=ifnull(s2.task_finish_cnt,0),
			s.task_set_cnt=ifnull(s2.task_set_cnt,0),
			s.task_close_cnt=ifnull(s2.task_close_cnt,0),


			s.test_cases=ifnull(s2.test_cases,0),
			s.exec_cases=ifnull(s2.exec_cases,0),
			s.design_cases=ifnull(s2.design_cases,0),
			s.finish_cases=ifnull(s2.finish_cases,0),

			s.bug_cnt=ifnull(s2.bug_cnt,0),
			s.active_bugs=ifnull(s2.active_bugs,0),
			s.confirmed_bugs=ifnull(s2.confirmed_bugs,0),
			s.resolved_bugs=ifnull(s2.resolved_bugs,0),
			s.closed_bugs=ifnull(s2.closed_bugs,0),
			xmm.children_cnt=ifnull(s2.children_cnt,0),
			s.min_start_time=s2.min_start_time,
			s.max_end_time=s2.max_end_time,
			xmm.start_time=s2.min_start_time,
			xmm.end_time=s2.max_end_time
			where s.menu_id = #{item}
		</foreach>
	</update>
	<insert id="batchLoadXmMenuToState" parameterType="HashMap">
		insert into xm_menu_state (product_id,menu_id,biz_date) select i.product_id,i.menu_id,#{bizDate} from xm_menu i left join xm_menu_state s on s.product_id=i.product_id and s.menu_id=i.menu_id  where i.product_id=#{productId}  and s.menu_id is null
	</insert>
	<!--结束 自定义sql函数区域-->
	

	
	<!-- 通过条件查询获取数据列表 返回list<map> -->
	<select id="selectListMapByWhere" parameterType="HashMap" resultType="HashMap">
		select * from xm_menu_state res
		<where>
		    <include refid="whereForMap"/>
			<include refid="where"/>
		</where>
	</select>
	
	<!-- 通过条件查询获取数据列表 不分页 返回 list<Object> -->
	<select id="selectListByWhere" parameterType="com.xm.core.entity.XmMenuState" resultType="com.xm.core.entity.XmMenuState">
		select * from xm_menu_state res
		<where>
			<include refid="where"/>
		</where>
	</select>
	
		<!-- 通过主键查询获取数据对象 返回object -->
	<select id="selectOneObject" parameterType="com.xm.core.entity.XmMenuState" resultType="com.xm.core.entity.XmMenuState">
		select * from xm_menu_state res
		where 
			res.menu_id = #{menuId}
	</select>
    <select id="selectListByIds" parameterType="List" resultType="com.xm.core.entity.XmMenuState">
        select * from xm_menu_state res
        where  (res.menu_id) in
             <foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
                 ( #{item})
             </foreach>
    </select>
	<!-- 通过主键查询获取数据对象 返回map-->
	<select id="selectOneMap" parameterType="HashMap" resultType="HashMap">
		select * from xm_menu_state res
		where 
			 res.menu_id = #{menuId}
	</select>
	<!-- 获取数据条目 返回long -->
	<select id="countByWhere" parameterType="com.xm.core.entity.XmMenuState" resultType="long">
		select count(1) from xm_menu_state res
		<where>
			<include refid="where"/>
		</where>
	</select>
	<!-- 新增一条记录  主键menu_id,-->
	<insert id="insert" parameterType="com.xm.core.entity.XmMenuState" useGeneratedKeys="false"   keyProperty="menu_id">
		insert into xm_menu_state(
			<include refid="columns"/>
		) values (
		#{menuId},#{finishRate},#{menuStatus},#{ctime},#{calcTime},#{menuName},#{planWorkhours},#{planWorkerCnt},#{closedBugs},#{activeBugs},#{confirmedBugs},#{resolvedBugs},#{productId},#{testCases},#{execCases},#{designCases},#{finishCases},#{bizDate},#{bugCnt},#{taskCnt},#{taskUnstartCnt},#{taskExecCnt},#{taskFinishCnt},#{taskSetCnt},#{taskOutCnt},#{taskCloseCnt},#{budgetNouserAt},#{budgetOuserAt},#{budgetIuserAt},#{actUserAt},#{actIuserAt},#{actOuserAt},#{actNouserAt},#{budgetWorkload},#{budgetOuserWorkload},#{budgetIuserWorkload},#{actWorkload},#{actOuserWorkload},#{actIuserWorkload},#{estimateWorkload},#{budgetAt},#{actAt},#{minStartTime},#{maxEndTime},#{productCnt},#{iterationCnt},#{projectCnt}
		)
	</insert>
	
	<!-- 按条件删除若干条记录-->
	<delete id="deleteByWhere" parameterType="com.xm.core.entity.XmMenuState">
		delete from xm_menu_state res
		<where>  
			<include refid="where"/>
		</where>
	</delete>
	
	<!-- 按主键删除一条记录-->
	<delete id="deleteByPk" parameterType="com.xm.core.entity.XmMenuState">
		delete from xm_menu_state 
		where menu_id = #{menuId} 
	</delete>
	
	<!-- 根据条件修改若干条记录 -->
	<update id="updateSomeFieldByPk" parameterType="com.xm.core.entity.XmMenuState">
		update  xm_menu_state 
		<set>
			<include refid="someFieldSet"/>
		</set>
		where menu_id = #{menuId} 
	</update>
	
		<!-- 根据主键修改一条记录 -->
	<update id="updateByPk" parameterType="com.xm.core.entity.XmMenuState">
		update  xm_menu_state 
		<set>
			<include refid="set"/>
		</set>
		where menu_id = #{menuId} 
	</update>

	<!-- 批量新增  批量插入 借用insert 循环插入实现
	<insert id="batchInsert" parameterType="List">
 	</insert>
 	-->
 	
	<!-- 批量更新 -->
	<update id="batchUpdate" parameterType="List">   
		<foreach collection="list" item="item" index="index" separator=";" >
   		update  xm_menu_state 
		set 
			<include refid="batchSet"/>
			where menu_id = #{item.menuId}  
		</foreach> 
	</update>
	<!-- 批量删除 -->
	<delete id="batchDelete" parameterType="List">  
		delete from xm_menu_state 
			where
			(menu_id) in
                <foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
                    (  #{item.menuId} )
                </foreach>
	</delete>
	
	
	<!--sql片段 列-->
	<sql id="columns">
		menu_id,finish_rate,menu_status,ctime,calc_time,menu_name,plan_workhours,plan_worker_cnt,closed_bugs,active_bugs,confirmed_bugs,resolved_bugs,product_id,test_cases,exec_cases,design_cases,finish_cases,biz_date,bug_cnt,task_cnt,task_unstart_cnt,task_exec_cnt,task_finish_cnt,task_set_cnt,task_out_cnt,task_close_cnt,budget_nouser_at,budget_ouser_at,budget_iuser_at,act_user_at,act_iuser_at,act_ouser_at,act_nouser_at,budget_workload,budget_ouser_workload,budget_iuser_workload,act_workload,act_ouser_workload,act_iuser_workload,estimate_workload,budget_at,act_at,min_start_time,max_end_time,product_cnt,iteration_cnt,project_cnt
	</sql>

	<!--sql片段 动态条件 YYYY-MM-DD HH24:MI:SS-->
	<sql id="where">
		<if test="menuId != null and menuId != ''">      and res.menu_id = #{menuId}     </if>
		<if test="finishRate != null and finishRate != ''">      and res.finish_rate = #{finishRate}     </if>
		<if test="menuStatus != null and menuStatus != ''">      and res.menu_status = #{menuStatus}     </if>
		<if test="ctime != null">      and date_format(res.ctime,'%Y-%m-%d') = date_format(#{ctime},'%Y-%m-%d')     </if>
		<if test="calcTime != null">      and date_format(res.calc_time,'%Y-%m-%d') = date_format(#{calcTime},'%Y-%m-%d')     </if>
		<if test="menuName != null and menuName != ''">      and res.menu_name = #{menuName}     </if>
		<if test="planWorkhours != null and planWorkhours != ''">      and res.plan_workhours = #{planWorkhours}     </if>
		<if test="planWorkerCnt != null and planWorkerCnt != ''">      and res.plan_worker_cnt = #{planWorkerCnt}     </if>
		<if test="closedBugs != null and closedBugs != ''">      and res.closed_bugs = #{closedBugs}     </if>
		<if test="activeBugs != null and activeBugs != ''">      and res.active_bugs = #{activeBugs}     </if>
		<if test="confirmedBugs != null and confirmedBugs != ''">      and res.confirmed_bugs = #{confirmedBugs}     </if>
		<if test="resolvedBugs != null and resolvedBugs != ''">      and res.resolved_bugs = #{resolvedBugs}     </if>
		<if test="productId != null and productId != ''">      and res.product_id = #{productId}     </if>
		<if test="testCases != null and testCases != ''">      and res.test_cases = #{testCases}     </if>
		<if test="execCases != null and execCases != ''">      and res.exec_cases = #{execCases}     </if>
		<if test="designCases != null and designCases != ''">      and res.design_cases = #{designCases}     </if>
		<if test="finishCases != null and finishCases != ''">      and res.finish_cases = #{finishCases}     </if>
		<if test="bizDate != null and bizDate != ''">      and res.biz_date = #{bizDate}     </if>
		<if test="bugCnt != null and bugCnt != ''">      and res.bug_cnt = #{bugCnt}     </if>
		<if test="taskCnt != null and taskCnt != ''">      and res.task_cnt = #{taskCnt}     </if>
		<if test="taskUnstartCnt != null and taskUnstartCnt != ''">      and res.task_unstart_cnt = #{taskUnstartCnt}     </if>
		<if test="taskExecCnt != null and taskExecCnt != ''">      and res.task_exec_cnt = #{taskExecCnt}     </if>
		<if test="taskFinishCnt != null and taskFinishCnt != ''">      and res.task_finish_cnt = #{taskFinishCnt}     </if>
		<if test="taskSetCnt != null and taskSetCnt != ''">      and res.task_set_cnt = #{taskSetCnt}     </if>
		<if test="taskOutCnt != null and taskOutCnt != ''">      and res.task_out_cnt = #{taskOutCnt}     </if>
		<if test="taskCloseCnt != null and taskCloseCnt != ''">      and res.task_close_cnt = #{taskCloseCnt}     </if>
		<if test="budgetNouserAt != null and budgetNouserAt != ''">      and res.budget_nouser_at = #{budgetNouserAt}     </if>
		<if test="budgetOuserAt != null and budgetOuserAt != ''">      and res.budget_ouser_at = #{budgetOuserAt}     </if>
		<if test="budgetIuserAt != null and budgetIuserAt != ''">      and res.budget_iuser_at = #{budgetIuserAt}     </if>
		<if test="actUserAt != null and actUserAt != ''">      and res.act_user_at = #{actUserAt}     </if>
		<if test="actIuserAt != null and actIuserAt != ''">      and res.act_iuser_at = #{actIuserAt}     </if>
		<if test="actOuserAt != null and actOuserAt != ''">      and res.act_ouser_at = #{actOuserAt}     </if>
		<if test="actNouserAt != null and actNouserAt != ''">      and res.act_nouser_at = #{actNouserAt}     </if>
		<if test="budgetWorkload != null and budgetWorkload != ''">      and res.budget_workload = #{budgetWorkload}     </if>
		<if test="budgetOuserWorkload != null and budgetOuserWorkload != ''">      and res.budget_ouser_workload = #{budgetOuserWorkload}     </if>
		<if test="budgetIuserWorkload != null and budgetIuserWorkload != ''">      and res.budget_iuser_workload = #{budgetIuserWorkload}     </if>
		<if test="actWorkload != null and actWorkload != ''">      and res.act_workload = #{actWorkload}     </if>
		<if test="actOuserWorkload != null and actOuserWorkload != ''">      and res.act_ouser_workload = #{actOuserWorkload}     </if>
		<if test="actIuserWorkload != null and actIuserWorkload != ''">      and res.act_iuser_workload = #{actIuserWorkload}     </if>
		<if test="estimateWorkload != null and estimateWorkload != ''">      and res.estimate_workload = #{estimateWorkload}     </if>
		<if test="budgetAt != null and budgetAt != ''">      and res.budget_at = #{budgetAt}     </if>
		<if test="actAt != null and actAt != ''">      and res.act_at = #{actAt}     </if>
		<if test="minStartTime != null">      and date_format(res.min_start_time,'%Y-%m-%d') = date_format(#{minStartTime},'%Y-%m-%d')     </if>
		<if test="maxEndTime != null">      and date_format(res.max_end_time,'%Y-%m-%d') = date_format(#{maxEndTime},'%Y-%m-%d')     </if>
		<if test="productCnt != null and productCnt != ''">      and res.product_cnt = #{productCnt}     </if>
		<if test="iterationCnt != null and iterationCnt != ''">      and res.iteration_cnt = #{iterationCnt}     </if>
		<if test="projectCnt != null and projectCnt != ''">      and res.project_cnt = #{projectCnt}     </if>
	</sql>
	<!--sql片段 更新字段 -->
	<sql id="set">
		finish_rate = #{finishRate},
		menu_status = #{menuStatus},
		ctime = #{ctime},
		calc_time = #{calcTime},
		menu_name = #{menuName},
		plan_workhours = #{planWorkhours},
		plan_worker_cnt = #{planWorkerCnt},
		closed_bugs = #{closedBugs},
		active_bugs = #{activeBugs},
		confirmed_bugs = #{confirmedBugs},
		resolved_bugs = #{resolvedBugs},
		product_id = #{productId},
		test_cases = #{testCases},
		exec_cases = #{execCases},
		design_cases = #{designCases},
		finish_cases = #{finishCases},
		biz_date = #{bizDate},
		bug_cnt = #{bugCnt},
		task_cnt = #{taskCnt},
		task_unstart_cnt = #{taskUnstartCnt},
		task_exec_cnt = #{taskExecCnt},
		task_finish_cnt = #{taskFinishCnt},
		task_set_cnt = #{taskSetCnt},
		task_out_cnt = #{taskOutCnt},
		task_close_cnt = #{taskCloseCnt},
		budget_nouser_at = #{budgetNouserAt},
		budget_ouser_at = #{budgetOuserAt},
		budget_iuser_at = #{budgetIuserAt},
		act_user_at = #{actUserAt},
		act_iuser_at = #{actIuserAt},
		act_ouser_at = #{actOuserAt},
		act_nouser_at = #{actNouserAt},
		budget_workload = #{budgetWorkload},
		budget_ouser_workload = #{budgetOuserWorkload},
		budget_iuser_workload = #{budgetIuserWorkload},
		act_workload = #{actWorkload},
		act_ouser_workload = #{actOuserWorkload},
		act_iuser_workload = #{actIuserWorkload},
		estimate_workload = #{estimateWorkload},
		budget_at = #{budgetAt},
		act_at = #{actAt},
		min_start_time = #{minStartTime},
		max_end_time = #{maxEndTime},
		product_cnt = #{productCnt},
		iteration_cnt = #{iterationCnt},
		project_cnt = #{projectCnt}
	</sql>
	<sql id="someFieldSet">
		<if test="finishRate != null and finishRate != ''"> finish_rate = #{finishRate},     </if>
		<if test="menuStatus != null and menuStatus != ''"> menu_status = #{menuStatus},     </if>
		<if test="ctime != null"> ctime = #{ctime},     </if>
		<if test="calcTime != null"> calc_time = #{calcTime},     </if>
		<if test="menuName != null and menuName != ''"> menu_name = #{menuName},     </if>
		<if test="planWorkhours != null and planWorkhours != ''"> plan_workhours = #{planWorkhours},     </if>
		<if test="planWorkerCnt != null and planWorkerCnt != ''"> plan_worker_cnt = #{planWorkerCnt},     </if>
		<if test="closedBugs != null and closedBugs != ''"> closed_bugs = #{closedBugs},     </if>
		<if test="activeBugs != null and activeBugs != ''"> active_bugs = #{activeBugs},     </if>
		<if test="confirmedBugs != null and confirmedBugs != ''"> confirmed_bugs = #{confirmedBugs},     </if>
		<if test="resolvedBugs != null and resolvedBugs != ''"> resolved_bugs = #{resolvedBugs},     </if>
		<if test="productId != null and productId != ''"> product_id = #{productId},     </if>
		<if test="testCases != null and testCases != ''"> test_cases = #{testCases},     </if>
		<if test="execCases != null and execCases != ''"> exec_cases = #{execCases},     </if>
		<if test="designCases != null and designCases != ''"> design_cases = #{designCases},     </if>
		<if test="finishCases != null and finishCases != ''"> finish_cases = #{finishCases},     </if>
		<if test="bizDate != null and bizDate != ''"> biz_date = #{bizDate},     </if>
		<if test="bugCnt != null and bugCnt != ''"> bug_cnt = #{bugCnt},     </if>
		<if test="taskCnt != null and taskCnt != ''"> task_cnt = #{taskCnt},     </if>
		<if test="taskUnstartCnt != null and taskUnstartCnt != ''"> task_unstart_cnt = #{taskUnstartCnt},     </if>
		<if test="taskExecCnt != null and taskExecCnt != ''"> task_exec_cnt = #{taskExecCnt},     </if>
		<if test="taskFinishCnt != null and taskFinishCnt != ''"> task_finish_cnt = #{taskFinishCnt},     </if>
		<if test="taskSetCnt != null and taskSetCnt != ''"> task_set_cnt = #{taskSetCnt},     </if>
		<if test="taskOutCnt != null and taskOutCnt != ''"> task_out_cnt = #{taskOutCnt},     </if>
		<if test="taskCloseCnt != null and taskCloseCnt != ''"> task_close_cnt = #{taskCloseCnt},     </if>
		<if test="budgetNouserAt != null and budgetNouserAt != ''"> budget_nouser_at = #{budgetNouserAt},     </if>
		<if test="budgetOuserAt != null and budgetOuserAt != ''"> budget_ouser_at = #{budgetOuserAt},     </if>
		<if test="budgetIuserAt != null and budgetIuserAt != ''"> budget_iuser_at = #{budgetIuserAt},     </if>
		<if test="actUserAt != null and actUserAt != ''"> act_user_at = #{actUserAt},     </if>
		<if test="actIuserAt != null and actIuserAt != ''"> act_iuser_at = #{actIuserAt},     </if>
		<if test="actOuserAt != null and actOuserAt != ''"> act_ouser_at = #{actOuserAt},     </if>
		<if test="actNouserAt != null and actNouserAt != ''"> act_nouser_at = #{actNouserAt},     </if>
		<if test="budgetWorkload != null and budgetWorkload != ''"> budget_workload = #{budgetWorkload},     </if>
		<if test="budgetOuserWorkload != null and budgetOuserWorkload != ''"> budget_ouser_workload = #{budgetOuserWorkload},     </if>
		<if test="budgetIuserWorkload != null and budgetIuserWorkload != ''"> budget_iuser_workload = #{budgetIuserWorkload},     </if>
		<if test="actWorkload != null and actWorkload != ''"> act_workload = #{actWorkload},     </if>
		<if test="actOuserWorkload != null and actOuserWorkload != ''"> act_ouser_workload = #{actOuserWorkload},     </if>
		<if test="actIuserWorkload != null and actIuserWorkload != ''"> act_iuser_workload = #{actIuserWorkload},     </if>
		<if test="estimateWorkload != null and estimateWorkload != ''"> estimate_workload = #{estimateWorkload},     </if>
		<if test="budgetAt != null and budgetAt != ''"> budget_at = #{budgetAt},     </if>
		<if test="actAt != null and actAt != ''"> act_at = #{actAt},     </if>
		<if test="minStartTime != null"> min_start_time = #{minStartTime},     </if>
		<if test="maxEndTime != null"> max_end_time = #{maxEndTime},     </if>
		<if test="productCnt != null and productCnt != ''"> product_cnt = #{productCnt},     </if>
		<if test="iterationCnt != null and iterationCnt != ''"> iteration_cnt = #{iterationCnt},     </if>
		<if test="projectCnt != null and projectCnt != ''"> project_cnt = #{projectCnt},     </if>
	</sql>
	<!--sql片段 批量更新 -->
	<sql id="batchSet">
			finish_rate = #{item.finishRate},
			menu_status = #{item.menuStatus},
			ctime = #{item.ctime},
			calc_time = #{item.calcTime},
			menu_name = #{item.menuName},
			plan_workhours = #{item.planWorkhours},
			plan_worker_cnt = #{item.planWorkerCnt},
			closed_bugs = #{item.closedBugs},
			active_bugs = #{item.activeBugs},
			confirmed_bugs = #{item.confirmedBugs},
			resolved_bugs = #{item.resolvedBugs},
			product_id = #{item.productId},
			test_cases = #{item.testCases},
			exec_cases = #{item.execCases},
			design_cases = #{item.designCases},
			finish_cases = #{item.finishCases},
			biz_date = #{item.bizDate},
			bug_cnt = #{item.bugCnt},
			task_cnt = #{item.taskCnt},
			task_unstart_cnt = #{item.taskUnstartCnt},
			task_exec_cnt = #{item.taskExecCnt},
			task_finish_cnt = #{item.taskFinishCnt},
			task_set_cnt = #{item.taskSetCnt},
			task_out_cnt = #{item.taskOutCnt},
			task_close_cnt = #{item.taskCloseCnt},
			budget_nouser_at = #{item.budgetNouserAt},
			budget_ouser_at = #{item.budgetOuserAt},
			budget_iuser_at = #{item.budgetIuserAt},
			act_user_at = #{item.actUserAt},
			act_iuser_at = #{item.actIuserAt},
			act_ouser_at = #{item.actOuserAt},
			act_nouser_at = #{item.actNouserAt},
			budget_workload = #{item.budgetWorkload},
			budget_ouser_workload = #{item.budgetOuserWorkload},
			budget_iuser_workload = #{item.budgetIuserWorkload},
			act_workload = #{item.actWorkload},
			act_ouser_workload = #{item.actOuserWorkload},
			act_iuser_workload = #{item.actIuserWorkload},
			estimate_workload = #{item.estimateWorkload},
			budget_at = #{item.budgetAt},
			act_at = #{item.actAt},
			min_start_time = #{item.minStartTime},
			max_end_time = #{item.maxEndTime},
			product_cnt = #{item.productCnt},
			iteration_cnt = #{item.iterationCnt},
			project_cnt = #{item.projectCnt}
	</sql>
</mapper>