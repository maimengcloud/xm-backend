<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xm.core.entity.XmQuestion">
	
	
	<!--开始 自定sql函数区域 请在此区域添加自定义函数,其它区域尽量不要动，因为代码随时重新生成 -->

    <sql id="whereForMap">
         <if test=" ids != null">  and (res.id) in
             <foreach collection="ids" item="item" index="index" open="(" separator="," close=")" >
                 ( #{item})
             </foreach>
         </if>
		<if test=" tagIdList != null"> and
			<foreach collection="tagIdList" item="item" index="index" open="(" separator=" or " close=")" >
				find_in_set(#{item},res.tag_ids)
			</foreach>
		</if>
		<if test="hisHandlerUserid !=null "> and exists (select 1 from xm_question_handle h where h.question_id = res.id and h.handler_userid=#{hisHandlerUserid} and handle_status=#{hisHandleStatus})</if>
		<if test=" createTimeStart !=null "> and res.create_time between #{createTimeStart} and #{createTimeEnd} </if>
		<if test=" ltimeStart !=null "> and res.ltime between #{ltimeStart} and #{ltimeEnd} </if>
		<if test="myUserid != null and myUserid != ''"> and ( res.create_userid=#{myUserid} or res.handler_userid=#{myUserid}) </if>
		<if test="menuIds != null">  and
			res.menu_id in
			<foreach collection="menuIds" item="item" index="index" open="(" separator="," close=")" >
				#{item}
			</foreach>
		</if>
		<if test="compete !=null and compete!=''">
			and (res.handler_userid=#{compete} or res.create_userid=#{compete} or exists ( select 1 from xm_group_user gu where gu.userid=#{compete} and (gu.project_id=res.project_id or gu.product_id=res.product_id)))
		</if>
		<if test="key != null and key !='' ">  and res.name like #{key}     </if>
		<if test="work != null and work != ''"> and res.status !='8' </if>
		<if test="linkIterationId != null and linkIterationId != ''"> and exists (select 1 from xm_menu m where m.iteration_id=#{linkIterationId} and m.menu_id=res.menu_id) </if>
    </sql>

	<select id="getXmQuestionAttDist" parameterType="HashMap" resultType="HashMap">
		select count(*) as value,${groupBy} as name from xm_question res
		<where>
			<include refid="whereForMap"></include>
			<include refid="where"></include>
		</where>
		group by ${groupBy}
	</select>
	<select id="getXmQuestionAgeDist" parameterType="HashMap" resultType="HashMap">

		select sum(value) as value,case when age&lt;3 then 0 when age &lt;6 then 1 when age &lt;8 then 2 when age &lt;16 then 3 when age&lt;31 then 4 else 5 end as name from (
		select count(*) as value, datediff (res.end_time,res.create_time)  as age from  xm_question res
		<where>
			<include refid="whereForMap"></include>
			<include refid="where"></include>
		</where>
		group by age
		) as a
		group by name
	</select>
	<select id="getXmQuestionSort" parameterType="HashMap" resultType="HashMap">
		select count(*) as value,${groupBy} as id,
		max( <if test="groupBy=='handler_userid'">handler_username</if>
			 <if test="groupBy=='ask_userid'">ask_username</if>
			 <if test="groupBy=='create_userid'">create_username</if>
		     <if test="groupBy=='func_id'">func_name</if>
			 <if test="groupBy=='menu_id'">menu_name</if> ) as name from xm_question res
		<where>
			<include refid="whereForMap"></include>
			<include refid="where"></include>
		</where>
		group by ${groupBy}
	</select>


	<select id="getXmQuestionRetestDist" parameterType="HashMap" resultType="HashMap">

		select count(*) as bugs_num,retimes from
		(
		SELECT count(*) as retimes,h.question_id FROM xm_question_handle h inner join xm_question res
		on res.id=h.question_id
		<where>
			<include refid="whereForMap"></include>
			<include refid="where"></include>
			and h.handle_status='9'
		</where>

		group by h.question_id ) as ret
		group by ret.retimes
		order by retimes desc
	</select>

	<!--结束 自定义sql函数区域-->
	

	
	<!-- 通过条件查询获取数据列表 返回list<map> -->
	<select id="selectListMapByWhere" parameterType="HashMap" resultType="HashMap">
		select * from xm_question res
		<where>
		    <include refid="whereForMap"/>
			<include refid="where"/>
		</where>
	</select>
	
	<!-- 通过条件查询获取数据列表 不分页 返回 list<Object> -->
	<select id="selectListByWhere" parameterType="com.xm.core.entity.XmQuestion" resultType="com.xm.core.entity.XmQuestion">
		select * from xm_question res
		<where>
			<include refid="where"/>
		</where>
	</select>
	
		<!-- 通过主键查询获取数据对象 返回object -->
	<select id="selectOneObject" parameterType="com.xm.core.entity.XmQuestion" resultType="com.xm.core.entity.XmQuestion">
		select * from xm_question res
		where 
			res.id = #{id}
	</select>
    <select id="selectListByIds" parameterType="List" resultType="com.xm.core.entity.XmQuestion">
        select * from xm_question res
        where  (res.id) in
             <foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
                 ( #{item})
             </foreach>
    </select>
	<!-- 通过主键查询获取数据对象 返回map-->
	<select id="selectOneMap" parameterType="HashMap" resultType="HashMap">
		select * from xm_question res
		where 
			 res.id = #{id}
	</select>
	<!-- 获取数据条目 返回long -->
	<select id="countByWhere" parameterType="com.xm.core.entity.XmQuestion" resultType="long">
		select count(*) from xm_question res
		<where>
			<include refid="where"/>
		</where>
	</select>
	<!-- 新增一条记录  主键id,-->
	<insert id="insert" parameterType="com.xm.core.entity.XmQuestion" useGeneratedKeys="false"   keyProperty="id">
		insert into xm_question(
			<include refid="columns"/>
		) values (
		#{id},#{name},#{projectId},#{projectName},#{caseId},#{caseName},#{endTime},#{askUserid},#{askUsername},#{handlerUserid},#{handlerUsername},#{priority},#{solution},#{description},#{createUserid},#{createUsername},#{createTime},#{bugStatus},#{bizProcInstId},#{bizFlowState},#{menuId},#{menuName},#{budgetWorkload},#{budgetAt},#{actWorkload},#{actAt},#{expectResult},#{opStep},#{currResult},#{refRequire},#{bugSeverity},#{bugType},#{tagIds},#{tagNames},#{urls},#{ltime},#{qtype},#{caseExecId},#{remarks},#{productId},#{repRate},#{verNum},#{vpath},#{pverNum},#{bugReason},#{rate},#{initWorkload},#{taskOut},#{taskId},#{funcId},#{funcName},#{funcPnames},#{planId},#{casedbId},#{pbranchId}
		)
	</insert>
	
	<!-- 按条件删除若干条记录-->
	<delete id="deleteByWhere" parameterType="com.xm.core.entity.XmQuestion">
		delete from xm_question res
		<where>  
			<include refid="where"/>
		</where>
	</delete>
	
	<!-- 按主键删除一条记录-->
	<delete id="deleteByPk" parameterType="com.xm.core.entity.XmQuestion">
		delete from xm_question 
		where id = #{id} 
	</delete>
	
	<!-- 根据条件修改若干条记录 -->
	<update id="updateSomeFieldByPk" parameterType="com.xm.core.entity.XmQuestion">
		update  xm_question 
		<set>
			<include refid="someFieldSet"/>
		</set>
		where id = #{id} 
	</update>
	
		<!-- 根据主键修改一条记录 -->
	<update id="updateByPk" parameterType="com.xm.core.entity.XmQuestion">
		update  xm_question 
		<set>
			<include refid="set"/>
		</set>
		where id = #{id} 
	</update>

	<!-- 批量新增  批量插入 借用insert 循环插入实现
	<insert id="batchInsert" parameterType="List">
 	</insert>
 	-->
 	
	<!-- 批量更新 -->
	<update id="batchUpdate" parameterType="List">   
		<foreach collection="list" item="item" index="index" separator=";" >
   		update  xm_question 
		set 
			<include refid="batchSet"/>
			where id = #{item.id}  
		</foreach> 
	</update>

	<!-- 批量修改某几个字段 -->
	<delete id="editSomeFields" parameterType="HashMap">
		update  xm_question
        <set>
            <include refid="someFieldSet"/>
        </set>
        where  (id) in
             <foreach collection="ids" item="item" index="index" open="(" separator="," close=")" >
                 ( #{item})
             </foreach>
	</delete>
	<!-- 批量删除 -->
	<delete id="batchDelete" parameterType="List">  
		delete from xm_question 
			where
			(id) in
                <foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
                    (  #{item.id} )
                </foreach>
	</delete>
	
	
	<!--sql片段 列-->
	<sql id="columns">
		id,name,project_id,project_name,case_id,case_name,end_time,ask_userid,ask_username,handler_userid,handler_username,priority,solution,description,create_userid,create_username,create_time,bug_status,biz_proc_inst_id,biz_flow_state,menu_id,menu_name,budget_workload,budget_at,act_workload,act_at,expect_result,op_step,curr_result,ref_require,bug_severity,bug_type,tag_ids,tag_names,urls,ltime,qtype,case_exec_id,remarks,product_id,rep_rate,ver_num,vpath,pver_num,bug_reason,rate,init_workload,task_out,task_id,func_id,func_name,func_pnames,plan_id,casedb_id,pbranch_id
	</sql>

	<!--sql片段 动态条件 YYYY-MM-DD HH24:MI:SS-->
	<sql id="where">
		<if test="id != null and id != ''">      and res.id = #{id}     </if>
		<if test="name != null and name != ''">      and res.name = #{name}     </if>
		<if test="projectId != null and projectId != ''">      and res.project_id = #{projectId}     </if>
		<if test="projectName != null and projectName != ''">      and res.project_name = #{projectName}     </if>
		<if test="caseId != null and caseId != ''">      and res.case_id = #{caseId}     </if>
		<if test="caseName != null and caseName != ''">      and res.case_name = #{caseName}     </if>
		<if test="endTime != null">      and date_format(res.end_time,'%Y-%m-%d') = date_format(#{endTime},'%Y-%m-%d')     </if>
		<if test="askUserid != null and askUserid != ''">      and res.ask_userid = #{askUserid}     </if>
		<if test="askUsername != null and askUsername != ''">      and res.ask_username = #{askUsername}     </if>
		<if test="handlerUserid != null and handlerUserid != ''">      and res.handler_userid = #{handlerUserid}     </if>
		<if test="handlerUsername != null and handlerUsername != ''">      and res.handler_username = #{handlerUsername}     </if>
		<if test="priority != null and priority != ''">      and res.priority = #{priority}     </if>
		<if test="solution != null and solution != ''">      and res.solution = #{solution}     </if>
		<if test="description != null and description != ''">      and res.description = #{description}     </if>
		<if test="createUserid != null and createUserid != ''">      and res.create_userid = #{createUserid}     </if>
		<if test="createUsername != null and createUsername != ''">      and res.create_username = #{createUsername}     </if>
		<if test="createTime != null">      and date_format(res.create_time,'%Y-%m-%d') = date_format(#{createTime},'%Y-%m-%d')     </if>
		<if test="bugStatus != null and bugStatus != ''">      and res.bug_status = #{bugStatus}     </if>
		<if test="bizProcInstId != null and bizProcInstId != ''">      and res.biz_proc_inst_id = #{bizProcInstId}     </if>
		<if test="bizFlowState != null and bizFlowState != ''">      and res.biz_flow_state = #{bizFlowState}     </if>
		<if test="menuId != null and menuId != ''">      and res.menu_id = #{menuId}     </if>
		<if test="menuName != null and menuName != ''">      and res.menu_name = #{menuName}     </if>
		<if test="budgetWorkload != null and budgetWorkload != ''">      and res.budget_workload = #{budgetWorkload}     </if>
		<if test="budgetAt != null and budgetAt != ''">      and res.budget_at = #{budgetAt}     </if>
		<if test="actWorkload != null and actWorkload != ''">      and res.act_workload = #{actWorkload}     </if>
		<if test="actAt != null and actAt != ''">      and res.act_at = #{actAt}     </if>
		<if test="expectResult != null and expectResult != ''">      and res.expect_result = #{expectResult}     </if>
		<if test="opStep != null and opStep != ''">      and res.op_step = #{opStep}     </if>
		<if test="currResult != null and currResult != ''">      and res.curr_result = #{currResult}     </if>
		<if test="refRequire != null and refRequire != ''">      and res.ref_require = #{refRequire}     </if>
		<if test="bugSeverity != null and bugSeverity != ''">      and res.bug_severity = #{bugSeverity}     </if>
		<if test="bugType != null and bugType != ''">      and res.bug_type = #{bugType}     </if>
		<if test="tagIds != null and tagIds != ''">      and res.tag_ids = #{tagIds}     </if>
		<if test="tagNames != null and tagNames != ''">      and res.tag_names = #{tagNames}     </if>
		<if test="urls != null and urls != ''">      and res.urls = #{urls}     </if>
		<if test="ltime != null">      and date_format(res.ltime,'%Y-%m-%d') = date_format(#{ltime},'%Y-%m-%d')     </if>
		<if test="qtype != null and qtype != ''">      and res.qtype = #{qtype}     </if>
		<if test="caseExecId != null and caseExecId != ''">      and res.case_exec_id = #{caseExecId}     </if>
		<if test="remarks != null and remarks != ''">      and res.remarks = #{remarks}     </if>
		<if test="productId != null and productId != ''">      and res.product_id = #{productId}     </if>
		<if test="repRate != null and repRate != ''">      and res.rep_rate = #{repRate}     </if>
		<if test="verNum != null and verNum != ''">      and res.ver_num = #{verNum}     </if>
		<if test="vpath != null and vpath != ''">      and res.vpath = #{vpath}     </if>
		<if test="pverNum != null and pverNum != ''">      and res.pver_num = #{pverNum}     </if>
		<if test="bugReason != null and bugReason != ''">      and res.bug_reason = #{bugReason}     </if>
		<if test="rate != null and rate != ''">      and res.rate = #{rate}     </if>
		<if test="initWorkload != null and initWorkload != ''">      and res.init_workload = #{initWorkload}     </if>
		<if test="taskOut != null and taskOut != ''">      and res.task_out = #{taskOut}     </if>
		<if test="taskId != null and taskId != ''">      and res.task_id = #{taskId}     </if>
		<if test="funcId != null and funcId != ''">      and res.func_id = #{funcId}     </if>
		<if test="funcName != null and funcName != ''">      and res.func_name = #{funcName}     </if>
		<if test="funcPnames != null and funcPnames != ''">      and res.func_pnames = #{funcPnames}     </if>
		<if test="planId != null and planId != ''">      and res.plan_id = #{planId}     </if>
		<if test="casedbId != null and casedbId != ''">      and res.casedb_id = #{casedbId}     </if>
		<if test="pbranchId != null and pbranchId != ''">      and res.pbranch_id = #{pbranchId}     </if>
	</sql>
	<!--sql片段 更新字段 -->
	<sql id="set">
		name = #{name},
		project_id = #{projectId},
		project_name = #{projectName},
		case_id = #{caseId},
		case_name = #{caseName},
		end_time = #{endTime},
		ask_userid = #{askUserid},
		ask_username = #{askUsername},
		handler_userid = #{handlerUserid},
		handler_username = #{handlerUsername},
		priority = #{priority},
		solution = #{solution},
		description = #{description},
		create_userid = #{createUserid},
		create_username = #{createUsername},
		create_time = #{createTime},
		bug_status = #{bugStatus},
		biz_proc_inst_id = #{bizProcInstId},
		biz_flow_state = #{bizFlowState},
		menu_id = #{menuId},
		menu_name = #{menuName},
		budget_workload = #{budgetWorkload},
		budget_at = #{budgetAt},
		act_workload = #{actWorkload},
		act_at = #{actAt},
		expect_result = #{expectResult},
		op_step = #{opStep},
		curr_result = #{currResult},
		ref_require = #{refRequire},
		bug_severity = #{bugSeverity},
		bug_type = #{bugType},
		tag_ids = #{tagIds},
		tag_names = #{tagNames},
		urls = #{urls},
		ltime = #{ltime},
		qtype = #{qtype},
		case_exec_id = #{caseExecId},
		remarks = #{remarks},
		product_id = #{productId},
		rep_rate = #{repRate},
		ver_num = #{verNum},
		vpath = #{vpath},
		pver_num = #{pverNum},
		bug_reason = #{bugReason},
		rate = #{rate},
		init_workload = #{initWorkload},
		task_out = #{taskOut},
		task_id = #{taskId},
		func_id = #{funcId},
		func_name = #{funcName},
		func_pnames = #{funcPnames},
		plan_id = #{planId},
		casedb_id = #{casedbId},
		pbranch_id = #{pbranchId}
	</sql>
	<sql id="someFieldSet">
		<if test="name != null and name != ''"> name = #{name},     </if>
		<if test="projectId != null and projectId != ''"> project_id = #{projectId},     </if>
		<if test="projectName != null and projectName != ''"> project_name = #{projectName},     </if>
		<if test="caseId != null and caseId != ''"> case_id = #{caseId},     </if>
		<if test="caseName != null and caseName != ''"> case_name = #{caseName},     </if>
		<if test="endTime != null"> end_time = #{endTime},     </if>
		<if test="askUserid != null and askUserid != ''"> ask_userid = #{askUserid},     </if>
		<if test="askUsername != null and askUsername != ''"> ask_username = #{askUsername},     </if>
		<if test="handlerUserid != null and handlerUserid != ''"> handler_userid = #{handlerUserid},     </if>
		<if test="handlerUsername != null and handlerUsername != ''"> handler_username = #{handlerUsername},     </if>
		<if test="priority != null and priority != ''"> priority = #{priority},     </if>
		<if test="solution != null and solution != ''"> solution = #{solution},     </if>
		<if test="description != null and description != ''"> description = #{description},     </if>
		<if test="createUserid != null and createUserid != ''"> create_userid = #{createUserid},     </if>
		<if test="createUsername != null and createUsername != ''"> create_username = #{createUsername},     </if>
		<if test="createTime != null"> create_time = #{createTime},     </if>
		<if test="bugStatus != null and bugStatus != ''"> bug_status = #{bugStatus},     </if>
		<if test="bizProcInstId != null and bizProcInstId != ''"> biz_proc_inst_id = #{bizProcInstId},     </if>
		<if test="bizFlowState != null and bizFlowState != ''"> biz_flow_state = #{bizFlowState},     </if>
		<if test="menuId != null and menuId != ''"> menu_id = #{menuId},     </if>
		<if test="menuName != null and menuName != ''"> menu_name = #{menuName},     </if>
		<if test="budgetWorkload != null and budgetWorkload != ''"> budget_workload = #{budgetWorkload},     </if>
		<if test="budgetAt != null and budgetAt != ''"> budget_at = #{budgetAt},     </if>
		<if test="actWorkload != null and actWorkload != ''"> act_workload = #{actWorkload},     </if>
		<if test="actAt != null and actAt != ''"> act_at = #{actAt},     </if>
		<if test="expectResult != null and expectResult != ''"> expect_result = #{expectResult},     </if>
		<if test="opStep != null and opStep != ''"> op_step = #{opStep},     </if>
		<if test="currResult != null and currResult != ''"> curr_result = #{currResult},     </if>
		<if test="refRequire != null and refRequire != ''"> ref_require = #{refRequire},     </if>
		<if test="bugSeverity != null and bugSeverity != ''"> bug_severity = #{bugSeverity},     </if>
		<if test="bugType != null and bugType != ''"> bug_type = #{bugType},     </if>
		<if test="tagIds != null and tagIds != ''"> tag_ids = #{tagIds},     </if>
		<if test="tagNames != null and tagNames != ''"> tag_names = #{tagNames},     </if>
		<if test="urls != null and urls != ''"> urls = #{urls},     </if>
		<if test="ltime != null"> ltime = #{ltime},     </if>
		<if test="qtype != null and qtype != ''"> qtype = #{qtype},     </if>
		<if test="caseExecId != null and caseExecId != ''"> case_exec_id = #{caseExecId},     </if>
		<if test="remarks != null and remarks != ''"> remarks = #{remarks},     </if>
		<if test="productId != null and productId != ''"> product_id = #{productId},     </if>
		<if test="repRate != null and repRate != ''"> rep_rate = #{repRate},     </if>
		<if test="verNum != null and verNum != ''"> ver_num = #{verNum},     </if>
		<if test="vpath != null and vpath != ''"> vpath = #{vpath},     </if>
		<if test="pverNum != null and pverNum != ''"> pver_num = #{pverNum},     </if>
		<if test="bugReason != null and bugReason != ''"> bug_reason = #{bugReason},     </if>
		<if test="rate != null and rate != ''"> rate = #{rate},     </if>
		<if test="initWorkload != null and initWorkload != ''"> init_workload = #{initWorkload},     </if>
		<if test="taskOut != null and taskOut != ''"> task_out = #{taskOut},     </if>
		<if test="taskId != null and taskId != ''"> task_id = #{taskId},     </if>
		<if test="funcId != null and funcId != ''"> func_id = #{funcId},     </if>
		<if test="funcName != null and funcName != ''"> func_name = #{funcName},     </if>
		<if test="funcPnames != null and funcPnames != ''"> func_pnames = #{funcPnames},     </if>
		<if test="planId != null and planId != ''"> plan_id = #{planId},     </if>
		<if test="casedbId != null and casedbId != ''"> casedb_id = #{casedbId},     </if>
		<if test="pbranchId != null and pbranchId != ''"> pbranch_id = #{pbranchId},     </if>
	</sql>
	<!--sql片段 批量更新 -->
	<sql id="batchSet">
			name = #{item.name},
			project_id = #{item.projectId},
			project_name = #{item.projectName},
			case_id = #{item.caseId},
			case_name = #{item.caseName},
			end_time = #{item.endTime},
			ask_userid = #{item.askUserid},
			ask_username = #{item.askUsername},
			handler_userid = #{item.handlerUserid},
			handler_username = #{item.handlerUsername},
			priority = #{item.priority},
			solution = #{item.solution},
			description = #{item.description},
			create_userid = #{item.createUserid},
			create_username = #{item.createUsername},
			create_time = #{item.createTime},
			bug_status = #{item.bugStatus},
			biz_proc_inst_id = #{item.bizProcInstId},
			biz_flow_state = #{item.bizFlowState},
			menu_id = #{item.menuId},
			menu_name = #{item.menuName},
			budget_workload = #{item.budgetWorkload},
			budget_at = #{item.budgetAt},
			act_workload = #{item.actWorkload},
			act_at = #{item.actAt},
			expect_result = #{item.expectResult},
			op_step = #{item.opStep},
			curr_result = #{item.currResult},
			ref_require = #{item.refRequire},
			bug_severity = #{item.bugSeverity},
			bug_type = #{item.bugType},
			tag_ids = #{item.tagIds},
			tag_names = #{item.tagNames},
			urls = #{item.urls},
			ltime = #{item.ltime},
			qtype = #{item.qtype},
			case_exec_id = #{item.caseExecId},
			remarks = #{item.remarks},
			product_id = #{item.productId},
			rep_rate = #{item.repRate},
			ver_num = #{item.verNum},
			vpath = #{item.vpath},
			pver_num = #{item.pverNum},
			bug_reason = #{item.bugReason},
			rate = #{item.rate},
			init_workload = #{item.initWorkload},
			task_out = #{item.taskOut},
			task_id = #{item.taskId},
			func_id = #{item.funcId},
			func_name = #{item.funcName},
			func_pnames = #{item.funcPnames},
			plan_id = #{item.planId},
			casedb_id = #{item.casedbId},
			pbranch_id = #{item.pbranchId}
	</sql>
</mapper>