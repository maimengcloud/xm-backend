<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xm.core.mapper.XmWorkloadMapper">

    <select id="selectListMapByWhere" resultType="HashMap">
        select * from xm_workload res
        <where>
            ${@com.mdp.Util@trimWhere(ew.customSqlSegment)}
            <!--下面可以添加更多查询条件，正常的if 条件都是支持的-->
            <include refid="whereForMap"></include>
        </where>
        <!--下面双引号内可以添加默认排序，如果前端没有上传排序，将使用引号内的排序规则-->
        ${@com.mdp.Util@trimOrderBy(ew.customSqlSegment,'')}
        <!--下面双引号内可以添加默认分组，如果前端没有上传分组，将使用引号内的分组规则-->
        ${@com.mdp.Util@trimGroupBy(ew.customSqlSegment,'')}
    </select>
    <sql id="whereForMap"> 
        <if test="ext.key != null and ext.key !='' ">
            AND
            (   res.username like #{ext.key} OR res.project_id like #{ext.key} OR res.task_id like #{ext.key})
        </if>
        <if test="ext.toSbill !=null and ext.toSbill !=''">
            AND  (res.wstatus = '1' AND res.sstatus = '1')
        </if>
        <if test="ext.wstatuses != null and ext.wstatuses!=''">
            AND res.wstatus IN
            <foreach collection="ext.wstatuses" item="item" index="index" open="(" separator="," close=")" >
                #{item}
            </foreach>
        </if>
        <if test ="ext.sstatuses != null and ext.sstatuses!=''">
            AND res.sstatus IN
            <foreach collection="ext.sstatuses" item="item" index="index" open="(" separator="," close=")" >
                #{item}
            </foreach>
        </if>
        <if test="ext.startTime!=null and ext.startTime !=''">
            AND res.ctime BETWEEN #{ext.startTime} AND #{ext.endTime}
        </if>

        <if test="ext.startBizDate!=null and ext.startBizDate !=''">
            AND res.biz_date BETWEEN #{ext.startBizDate} AND #{ext.endBizDate}
        </if>
        <if test="ext.sbillId!=null and ext.sbillId !=''">
            AND exists( select 1 from xm_task_sbill_detail d where d.id=res.detail_id and d.sbill_id=#{ext.sbillId})
        </if>
        <if test="ext.linkBranchId!=null and ext.linkBranchId!=''">
            and (res.branch_id = #{ext.linkBranchId} or res.ubranch_id=#{ext.linkBranchId})
        </if>
        <if test="ext.bizMonth!=null and ext.bizMonth!=''">
            and res.biz_date  like concat(#{ext.bizMonth},'%')
        </if>
    </sql>
    <update id="updateStatusBySbillIdBySbillDel" parameterType="String">
        update xm_workload res set detail_id=null,sbill_id=null,sstatus='1'
        where exists (select 1 from xm_task_sbill_detail d where d.id=res.detail_id and d.sbill_id=#{sbillId})
    </update>
    <update id="updateStatusBySbillId" parameterType="HashMap">
        update xm_workload res set sstatus=#{sstatus}
        where exists (select 1 from xm_task_sbill_detail d where d.id=res.detail_id and d.sbill_id=#{sbillId})
    </update>

    <select id="listProjectWorkloadSetDay" parameterType="HashMap" resultType="HashMap">
        select
        res.biz_date,
        sum(ifnull(res.workload,0)) as workload,
        sum(if(res.wstatus='0',ifnull(res.workload,0),0)) as to_confirm_workload,
        sum(if(res.wstatus='1',ifnull(res.workload,0),0)) as had_confirm_workload,
        sum(if(res.sstatus='0',ifnull(res.workload,0),0)) as not_need_set_workload,
        sum(if(res.sstatus='1',ifnull(res.workload,0),0)) as to_set_sworkload,
        sum(if(res.sstatus='2',ifnull(res.workload,0),0)) as had_commit_sworkload,
        sum(if(res.sstatus='3',ifnull(res.workload,0),0)) as had_agree_sworkload,
        sum(if(res.sstatus='4',ifnull(res.workload,0),0)) as had_set_sworkload,
        count(distinct res.userid) as user_num
        from xm_workload res
        <where>
            ${@com.mdp.Util@trimWhere(ew.customSqlSegment)}
            <include refid="whereForMap"/>
        </where>
        group by res.biz_date
        order by res.biz_date asc
    </select>

    <select id="listProjectWorkloadSetMonth" parameterType="HashMap" resultType="HashMap">
        select
        left(res.biz_date,7) as biz_month,
        sum(ifnull(res.workload,0)) as workload,
        sum(if(res.wstatus='0',ifnull(res.workload,0),0)) as to_confirm_workload,
        sum(if(res.wstatus='1',ifnull(res.workload,0),0)) as had_confirm_workload,
        sum(if(res.sstatus='0',ifnull(res.workload,0),0)) as not_need_set_workload,
        sum(if(res.sstatus='1',ifnull(res.workload,0),0)) as to_set_sworkload,
        sum(if(res.sstatus='2',ifnull(res.workload,0),0)) as had_commit_sworkload,
        sum(if(res.sstatus='3',ifnull(res.workload,0),0)) as had_agree_sworkload,
        sum(if(res.sstatus='4',ifnull(res.workload,0),0)) as had_set_sworkload,
        count(distinct res.userid) as user_num
        from xm_workload res
        <where>
            ${@com.mdp.Util@trimWhere(ew.customSqlSegment)}
            <include refid="whereForMap"/>
        </where>
        group by biz_month
        order by biz_month asc
    </select>

    <select id="listTaskWorkloadBySbillIdGroupByUseridAndTaskId" parameterType="String" resultType="HashMap">
        select sum(ifnull(res.workload,0)) as workload,
        sum(ifnull(res.workload,0)) as sworkload,res.task_id ,max(res.username) as username,max(t.name) as task_name from xm_workload res inner join xm_task t on res.task_id=t.id
        where
        exists (select 1 from xm_task_sbill_detail d where d.id=res.detail_id and d.sbill_id=#{sbillId})
        and res.sstatus='4'
        group by res.userid,res.task_id
    </select>

    <!--查询待确认工时-->
    <select id="selectListMapGroupByTaskIdAndUserid" parameterType="HashMap" resultType="HashMap">
        select res.*, task.project_name,task.name as task_name,task.budget_workload,task.act_workload,task_state from xm_task task
        inner join (
        select res.project_id,res.task_id,res.userid,
        max(res.username) as username,
        sum(ifnull(res.workload,0)) as workload,
        sum(if(res.wstatus='0',ifnull(res.workload,0),0)) as to_confirm_workload,
        sum(if(res.wstatus='1',ifnull(res.workload,0),0)) as had_confirm_workload,
        sum(if(res.sstatus='0',ifnull(res.workload,0),0)) as not_need_set_workload,
        sum(if(res.sstatus='1',ifnull(res.workload,0),0)) as to_set_sworkload,
        sum(if(res.sstatus='2',ifnull(res.workload,0),0)) as had_commit_sworkload,
        sum(if(res.sstatus='3',ifnull(res.workload,0),0)) as had_agree_sworkload,
        sum(if(res.sstatus='4',ifnull(res.workload,0),0)) as had_set_sworkload
        from xm_workload res
        <where>
            <include refid="whereForMap"/>
        </where>
        group by res.project_id,res.task_id,res.userid
        ) as res on res.task_id = task.id
        <where>
            <if test="ext.projectId!=null and ext.projectId!=''">
                and task.project_id=#{ext.projectId}
            </if>
            <if test="ext.taskId!=null and ext.taskId!=''">
                and task.id=#{ext.taskId}
            </if>
            <if test="ext.userid!=null and ext.userid!=''">
                and res.userid=#{ext.userid}
            </if>
            <if test="ext.branchId!=null and ext.branchId!=''">
                and task.cbranch_id=#{ext.branchId}
            </if>
        </where>

    </select>

    <!--查询待结算工时-->
    <select id="listGroupByTaskIdAndUseridToSet" parameterType="HashMap" resultType="HashMap">
        select res.*, task.project_name,task.name as task_name,task.budget_workload,task.act_workload,task_state,task_out,crowd,uni_inner_price,uni_out_price,settle_schemel as sschemel,task.budget_at,task.oshare,task.share_fee,
        e.quote_workload,e.quote_amount as quote_at,e.exec_user_branch_id,e.quote_end_time,e.quote_start_time,e.dist_userid,e.dist_username,e.exec_user_branch_id as cp_id,e.share_key,e.sfee_rate,e.sfee
        from xm_task task
        inner join (
        select res.project_id,res.task_id,res.userid,
        max(res.username) as username,
        sum(ifnull(res.workload,0)) as workload,
        sum(if(res.wstatus='0',ifnull(res.workload,0),0)) as to_confirm_workload,
        sum(if(res.wstatus='1',ifnull(res.workload,0),0)) as had_confirm_workload,
        sum(if(res.sstatus='0',ifnull(res.workload,0),0)) as not_need_set_workload,
        sum(if(res.sstatus='1',ifnull(res.workload,0),0)) as to_set_sworkload,
        sum(if(res.sstatus='2',ifnull(res.workload,0),0)) as had_commit_sworkload,
        sum(if(res.sstatus='3',ifnull(res.workload,0),0)) as had_agree_sworkload,
        sum(if(res.sstatus='4',ifnull(res.workload,0),0)) as had_set_sworkload
        from xm_workload res
        <where>
            <if test="projectId!=null and projectId!=''">
                and res.project_id=#{projectId}
            </if>
            <if test="taskId!=null and taskId!=''">
                and res.id=#{taskId}
            </if>
            <if test="userid!=null and userid!=''">
                and res.userid=#{userid}
            </if>
            <if test="branchId!=null and branchId!=''">
                and res.branch_id=#{branchId}
            </if>
            <if test="ubranchId!=null and ubranchId!=''">
                and res.ubranch_id=#{ubranchId}
            </if>
            <if test="userTasks!=null">
                and (res.userid,res.task_id) in
                <foreach collection="userTasks" item="item" index="index" open="(" separator="," close=")" >
                    ( #{item.userid},#{item.taskId})
                </foreach>
            </if>

            and res.sstatus='1'
            and res.detail_id is null
        </where>
        group by res.project_id,res.task_id,res.userid
        ) as res on res.task_id = task.id
        inner join xm_task_execuser e on res.task_id=e.task_id and res.userid=e.userid
        <where>
            <if test="projectId!=null and projectId!=''">
                and task.project_id=#{projectId}
            </if>
            <if test="taskId!=null and taskId!=''">
                and task.id=#{taskId}
            </if>
            <if test="userid!=null and userid!=''">
                and res.userid=#{userid}
            </if>
            <if test="branchId!=null and branchId!=''">
                and e.branch_id=#{branchId}
            </if>
            <if test="ubranchId!=null and ubranchId!=''">
                and e.exec_user_branch_id=#{ubranchId}
            </if>
        </where>

    </select>
    <update id="updateStatusAfterJoinSbill" parameterType="HashMap">
        update xm_workload res set res.sstatus='2',res.detail_id=#{detailId},res.sbill_id=#{sbillId}
        where  res.id in
        <foreach collection="ids" item="item" index="index" open="(" separator="," close=")" >
            #{item}
        </foreach>
    </update>
    <update id="updateStatusAfterDetailDel" parameterType="List">
        update xm_workload res set res.sstatus='1',res.detail_id=null,res.sbill_id=null
        where  res.detail_id in
        <foreach collection="list" item="item" index="index" open="(" separator="," close=")" >
            #{item}
        </foreach>
    </update>

    <update id="updateStatusBySbillIdByFlowStatea" parameterType="HashMap">
        update xm_workload res inner join xm_task_sbill_detail d on d.id=res.detail_id
        set res.sstatus=#{sstatus},d.sstatus=#{sstatus}
        where d.sbill_id=#{sbillId}
    </update>
</mapper>