<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xm.core.mapper.XmTestPlanMapper">

    <select id="selectListMapByWhere" resultType="HashMap">
        select * from xm_test_plan res
        <where>
            ${@com.mdp.Util@trimWhere(ew.customSqlSegment)}
            <!--下面可以添加更多查询条件，正常的if 条件都是支持的-->

        </where>
        <!--下面双引号内可以添加默认排序，如果前端没有上传排序，将使用引号内的排序规则-->
        ${@com.mdp.Util@trimOrderBy(ew.customSqlSegment,'')}
        <!--下面双引号内可以添加默认分组，如果前端没有上传分组，将使用引号内的分组规则-->
        ${@com.mdp.Util@trimGroupBy(ew.customSqlSegment,'')}
    </select>
    <update id="calcXmTestPlan" parameterType="String">
        UPDATE xm_test_plan res
        LEFT JOIN (
        SELECT
        pc.plan_id,
        count( * ) total_cases,
        sum( IF ( pc.exec_status = '2', 1, 0 ) ) ok_cases,
        sum( IF ( pc.exec_status = '4', 1, 0 ) ) err_cases,
        sum( IF ( pc.exec_status = '1', 1, 0 ) ) ig_cases,
        sum( IF ( pc.exec_status = '3', 1, 0 ) ) bl_cases,
        sum( IF ( pc.exec_status = '0', 1, 0 ) ) to_test_cases,
        count( DISTINCT c.menu_id ) menus,
        count( DISTINCT c.func_id ) funcs
        FROM
        xm_test_plan_case pc
        INNER JOIN xm_test_case c ON pc.case_id = c.id
        WHERE
        pc.plan_id = #{id}
        GROUP BY
        pc.plan_id
        ) AS cc ON cc.plan_id = res.id
        LEFT JOIN (
        SELECT
        q.plan_id,
        count( * ) bug_cnt,
        sum(
        IF
        (
        q.bug_status = '1'
        OR q.bug_status = '2'
        OR q.bug_status = '3'
        OR q.bug_status = '4'
        OR q.bug_status = '5'
        OR q.bug_status = '6'
        OR q.bug_status = '9',
        1,
        0
        )
        ) active_bugs,
        sum( IF ( q.bug_status = '8', 1, 0 ) ) closed_bugs,
        sum( IF ( q.bug_status = '7', 1, 0 ) ) resolved_bugs,
        0 confirmed_bugs
        FROM
        xm_question q
        WHERE
        q.plan_id = #{id}
        GROUP BY
        q.plan_id
        ) AS bugs ON res.id = bugs.plan_id
        SET res.total_cases = cc.total_cases,
        res.ok_cases = cc.ok_cases,
        res.err_cases = cc.err_cases,
        res.ig_cases = cc.ig_cases,
        res.bl_cases = cc.bl_cases,
        res.to_test_cases = cc.to_test_cases,
        res.menus = cc.menus,
        res.funcs = cc.funcs,
        res.bug_cnt = bugs.bug_cnt,
        res.active_bugs = bugs.active_bugs,
        res.closed_bugs = bugs.closed_bugs,
        res.resolved_bugs = bugs.resolved_bugs,
        res.resolved_bugs = bugs.resolved_bugs,
        res.confirmed_bugs = bugs.confirmed_bugs
        WHERE
        id = #{id}
    </update>
</mapper>